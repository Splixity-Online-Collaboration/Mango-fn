// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"


let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )


# 26 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF of (Position)
  | COMMA of (Position)
  | WINDOW of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | NUM of (int * Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_WINDOW
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_Exp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF _ -> 0 
  | COMMA _ -> 1 
  | WINDOW _ -> 2 
  | ID _ -> 3 
  | STRINGLIT _ -> 4 
  | NUM _ -> 5 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_WINDOW 
  | 3 -> TOKEN_ID 
  | 4 -> TOKEN_STRINGLIT 
  | 5 -> TOKEN_NUM 
  | 8 -> TOKEN_end_of_input
  | 6 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_Exp 
    | 3 -> NONTERM_Exp 
    | 4 -> NONTERM_Exp 
    | 5 -> NONTERM_Exp 
    | 6 -> NONTERM_Exp 
    | 7 -> NONTERM_Exp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 8 
let _fsyacc_tagOfErrorTerminal = 6

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF _ -> "EOF" 
  | COMMA _ -> "COMMA" 
  | WINDOW _ -> "WINDOW" 
  | ID _ -> "ID" 
  | STRINGLIT _ -> "STRINGLIT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WINDOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;3us;1us;4us;3us;5us;6us;7us;3us;5us;6us;7us;2us;6us;7us;2us;6us;7us;1us;7us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;18us;22us;25us;28us;|]
let _fsyacc_action_rows = 12
let _fsyacc_actionTableElements = [|4us;32768us;2us;7us;3us;6us;4us;5us;5us;4us;0us;49152us;1us;32768us;0us;3us;0us;16385us;0us;16386us;0us;16387us;0us;16388us;1us;32768us;4us;8us;1us;16389us;5us;9us;1us;32768us;5us;10us;1us;16390us;4us;11us;0us;16391us;|]
let _fsyacc_actionTableRowOffsets = [|0us;5us;6us;8us;9us;10us;11us;12us;14us;16us;18us;20us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;1us;1us;2us;4us;5us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;2us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16386us;16387us;16388us;65535us;65535us;65535us;65535us;16391us;|]
let _fsyacc_reductions = lazy [|
# 120 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 129 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Exp in
            let _2 = parseState.GetInput(2) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                           _1 
                   )
# 34 "Parser.fsy"
                 : AbSyn.Exp));
# 141 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                            Constant (fst _1, snd _1) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_Exp));
# 152 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                            StringLit _1 
                   )
# 38 "Parser.fsy"
                 : 'gentype_Exp));
# 163 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                            Var (fst _1, snd _1) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_Exp));
# 174 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                              Window (fst _2, _1)
                   )
# 40 "Parser.fsy"
                 : 'gentype_Exp));
# 186 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                                      WindowWithSize (fst _2, fst _3, fst _4, _1) 
                   )
# 41 "Parser.fsy"
                 : 'gentype_Exp));
# 200 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> int * Position in
            let _5 = parseState.GetInput(5) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                                WindowWithIcon (fst _2, fst _3, fst _4, fst _5, _1) 
                   )
# 42 "Parser.fsy"
                 : 'gentype_Exp));
|]
# 216 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 9;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.Exp =
    engine lexer lexbuf 0 :?> _
