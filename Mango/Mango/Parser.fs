// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )

let construct_window window elements functions = 
    match window with
    | Window (name, width, height, icon, _, _, pos) -> Window (name, width, height, icon, elements, functions, pos)

let add_ui_elements window elements = 
  match window with
  | Window (name, width, height, icon, _, functions, pos) -> Window (name, width, height, icon, elements, functions, pos)

let default_button_props pos = [IsVisible (true, pos)]
let default_text_props pos = [Foreground (Hex (HexCode(byte 255,byte 255,byte 255,byte 255), pos), pos)]

let parse_hex_code (s: string) : (byte * byte * byte * byte) option =
  let hex = if s.StartsWith("#") then s.Substring(1) else s
  let tryByte i = System.Byte.TryParse(hex.Substring(i,2), System.Globalization.NumberStyles.HexNumber, null)
  match hex.Length with
  | 6 ->
      let (rOk, r), (gOk, g), (bOk, b) = tryByte 0, tryByte 2, tryByte 4
      if rOk && gOk && bOk then Some (r, g, b, 255uy) else None
  | 8 ->
      let (rOk, r), (gOk, g), (bOk, b), (aOk, a) = tryByte 0, tryByte 2, tryByte 4, tryByte 6
      if rOk && gOk && bOk && aOk then Some (r, g, b, a) else None
  | _ -> None

# 47 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF of (Position)
  | COMMA of (Position)
  | LEFT_CURLY_BRACKET of (Position)
  | RIGHT_CURLY_BRACKET of (Position)
  | COLON of (Position)
  | LEFT_PAR of (Position)
  | RIGHT_PAR of (Position)
  | EQUAL of (Position)
  | WORD of (Position)
  | CHARACTER of (Position)
  | NOTRIM of (Position)
  | OVERFLOW of (Position)
  | WRAP of (Position)
  | FORCEWRAP of (Position)
  | CENTER of (Position)
  | LEFT of (Position)
  | RIGHT of (Position)
  | RED of (Position)
  | BLUE of (Position)
  | GREEN of (Position)
  | YELLOW of (Position)
  | PINK of (Position)
  | ITALIC of (Position)
  | UNDERLINE of (Position)
  | STRIKETHROUGH of (Position)
  | FOREGROUND of (Position)
  | BACKGROUND of (Position)
  | FONTFAMILY of (Position)
  | FONTSIZE of (Position)
  | FONTWEIGHT of (Position)
  | FONTSTYLE of (Position)
  | PADDING of (Position)
  | LINEHEIGHT of (Position)
  | TEXTALIGN of (Position)
  | TEXTWRAP of (Position)
  | TEXTTRIM of (Position)
  | IS_VISIBLE of (Position)
  | TRUE of (Position)
  | FALSE of (Position)
  | WIDTH of (Position)
  | HEIGHT of (Position)
  | FUNCTION of (Position)
  | LET of (Position)
  | WINDOW of (Position)
  | BUTTON of (Position)
  | TEXT of (Position)
  | TEXTBOX of (Position)
  | CHECKBOX of (Position)
  | RADIOBUTTON of (Position)
  | CALENDAR of (Position)
  | TOGGLEBUTTON of (Position)
  | TOGGLESWITCH of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | HEXCOLOR of (string * Position)
  | NUM of (int * Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_LEFT_CURLY_BRACKET
    | TOKEN_RIGHT_CURLY_BRACKET
    | TOKEN_COLON
    | TOKEN_LEFT_PAR
    | TOKEN_RIGHT_PAR
    | TOKEN_EQUAL
    | TOKEN_WORD
    | TOKEN_CHARACTER
    | TOKEN_NOTRIM
    | TOKEN_OVERFLOW
    | TOKEN_WRAP
    | TOKEN_FORCEWRAP
    | TOKEN_CENTER
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_RED
    | TOKEN_BLUE
    | TOKEN_GREEN
    | TOKEN_YELLOW
    | TOKEN_PINK
    | TOKEN_ITALIC
    | TOKEN_UNDERLINE
    | TOKEN_STRIKETHROUGH
    | TOKEN_FOREGROUND
    | TOKEN_BACKGROUND
    | TOKEN_FONTFAMILY
    | TOKEN_FONTSIZE
    | TOKEN_FONTWEIGHT
    | TOKEN_FONTSTYLE
    | TOKEN_PADDING
    | TOKEN_LINEHEIGHT
    | TOKEN_TEXTALIGN
    | TOKEN_TEXTWRAP
    | TOKEN_TEXTTRIM
    | TOKEN_IS_VISIBLE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_WIDTH
    | TOKEN_HEIGHT
    | TOKEN_FUNCTION
    | TOKEN_LET
    | TOKEN_WINDOW
    | TOKEN_BUTTON
    | TOKEN_TEXT
    | TOKEN_TEXTBOX
    | TOKEN_CHECKBOX
    | TOKEN_RADIOBUTTON
    | TOKEN_CALENDAR
    | TOKEN_TOGGLEBUTTON
    | TOKEN_TOGGLESWITCH
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_HEXCOLOR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_Window
    | NONTERM_UIElements
    | NONTERM_Funcs
    | NONTERM_UIElement
    | NONTERM_ButtonProps
    | NONTERM_ButtonProp
    | NONTERM_TextProps
    | NONTERM_TextProp
    | NONTERM_Color
    | NONTERM_FontStyle
    | NONTERM_FontStyles
    | NONTERM_TextAlign
    | NONTERM_TextWrap
    | NONTERM_TextTrim
    | NONTERM_Padding
    | NONTERM_Functions
    | NONTERM_Function
    | NONTERM_Statements
    | NONTERM_Stmt
    | NONTERM_Exp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF _ -> 0 
  | COMMA _ -> 1 
  | LEFT_CURLY_BRACKET _ -> 2 
  | RIGHT_CURLY_BRACKET _ -> 3 
  | COLON _ -> 4 
  | LEFT_PAR _ -> 5 
  | RIGHT_PAR _ -> 6 
  | EQUAL _ -> 7 
  | WORD _ -> 8 
  | CHARACTER _ -> 9 
  | NOTRIM _ -> 10 
  | OVERFLOW _ -> 11 
  | WRAP _ -> 12 
  | FORCEWRAP _ -> 13 
  | CENTER _ -> 14 
  | LEFT _ -> 15 
  | RIGHT _ -> 16 
  | RED _ -> 17 
  | BLUE _ -> 18 
  | GREEN _ -> 19 
  | YELLOW _ -> 20 
  | PINK _ -> 21 
  | ITALIC _ -> 22 
  | UNDERLINE _ -> 23 
  | STRIKETHROUGH _ -> 24 
  | FOREGROUND _ -> 25 
  | BACKGROUND _ -> 26 
  | FONTFAMILY _ -> 27 
  | FONTSIZE _ -> 28 
  | FONTWEIGHT _ -> 29 
  | FONTSTYLE _ -> 30 
  | PADDING _ -> 31 
  | LINEHEIGHT _ -> 32 
  | TEXTALIGN _ -> 33 
  | TEXTWRAP _ -> 34 
  | TEXTTRIM _ -> 35 
  | IS_VISIBLE _ -> 36 
  | TRUE _ -> 37 
  | FALSE _ -> 38 
  | WIDTH _ -> 39 
  | HEIGHT _ -> 40 
  | FUNCTION _ -> 41 
  | LET _ -> 42 
  | WINDOW _ -> 43 
  | BUTTON _ -> 44 
  | TEXT _ -> 45 
  | TEXTBOX _ -> 46 
  | CHECKBOX _ -> 47 
  | RADIOBUTTON _ -> 48 
  | CALENDAR _ -> 49 
  | TOGGLEBUTTON _ -> 50 
  | TOGGLESWITCH _ -> 51 
  | ID _ -> 52 
  | STRINGLIT _ -> 53 
  | HEXCOLOR _ -> 54 
  | NUM _ -> 55 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_LEFT_CURLY_BRACKET 
  | 3 -> TOKEN_RIGHT_CURLY_BRACKET 
  | 4 -> TOKEN_COLON 
  | 5 -> TOKEN_LEFT_PAR 
  | 6 -> TOKEN_RIGHT_PAR 
  | 7 -> TOKEN_EQUAL 
  | 8 -> TOKEN_WORD 
  | 9 -> TOKEN_CHARACTER 
  | 10 -> TOKEN_NOTRIM 
  | 11 -> TOKEN_OVERFLOW 
  | 12 -> TOKEN_WRAP 
  | 13 -> TOKEN_FORCEWRAP 
  | 14 -> TOKEN_CENTER 
  | 15 -> TOKEN_LEFT 
  | 16 -> TOKEN_RIGHT 
  | 17 -> TOKEN_RED 
  | 18 -> TOKEN_BLUE 
  | 19 -> TOKEN_GREEN 
  | 20 -> TOKEN_YELLOW 
  | 21 -> TOKEN_PINK 
  | 22 -> TOKEN_ITALIC 
  | 23 -> TOKEN_UNDERLINE 
  | 24 -> TOKEN_STRIKETHROUGH 
  | 25 -> TOKEN_FOREGROUND 
  | 26 -> TOKEN_BACKGROUND 
  | 27 -> TOKEN_FONTFAMILY 
  | 28 -> TOKEN_FONTSIZE 
  | 29 -> TOKEN_FONTWEIGHT 
  | 30 -> TOKEN_FONTSTYLE 
  | 31 -> TOKEN_PADDING 
  | 32 -> TOKEN_LINEHEIGHT 
  | 33 -> TOKEN_TEXTALIGN 
  | 34 -> TOKEN_TEXTWRAP 
  | 35 -> TOKEN_TEXTTRIM 
  | 36 -> TOKEN_IS_VISIBLE 
  | 37 -> TOKEN_TRUE 
  | 38 -> TOKEN_FALSE 
  | 39 -> TOKEN_WIDTH 
  | 40 -> TOKEN_HEIGHT 
  | 41 -> TOKEN_FUNCTION 
  | 42 -> TOKEN_LET 
  | 43 -> TOKEN_WINDOW 
  | 44 -> TOKEN_BUTTON 
  | 45 -> TOKEN_TEXT 
  | 46 -> TOKEN_TEXTBOX 
  | 47 -> TOKEN_CHECKBOX 
  | 48 -> TOKEN_RADIOBUTTON 
  | 49 -> TOKEN_CALENDAR 
  | 50 -> TOKEN_TOGGLEBUTTON 
  | 51 -> TOKEN_TOGGLESWITCH 
  | 52 -> TOKEN_ID 
  | 53 -> TOKEN_STRINGLIT 
  | 54 -> TOKEN_HEXCOLOR 
  | 55 -> TOKEN_NUM 
  | 58 -> TOKEN_end_of_input
  | 56 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_Window 
    | 3 -> NONTERM_Window 
    | 4 -> NONTERM_Window 
    | 5 -> NONTERM_Window 
    | 6 -> NONTERM_Window 
    | 7 -> NONTERM_UIElements 
    | 8 -> NONTERM_UIElements 
    | 9 -> NONTERM_Funcs 
    | 10 -> NONTERM_Funcs 
    | 11 -> NONTERM_UIElement 
    | 12 -> NONTERM_UIElement 
    | 13 -> NONTERM_UIElement 
    | 14 -> NONTERM_UIElement 
    | 15 -> NONTERM_UIElement 
    | 16 -> NONTERM_UIElement 
    | 17 -> NONTERM_UIElement 
    | 18 -> NONTERM_UIElement 
    | 19 -> NONTERM_UIElement 
    | 20 -> NONTERM_UIElement 
    | 21 -> NONTERM_ButtonProps 
    | 22 -> NONTERM_ButtonProps 
    | 23 -> NONTERM_ButtonProp 
    | 24 -> NONTERM_ButtonProp 
    | 25 -> NONTERM_ButtonProp 
    | 26 -> NONTERM_ButtonProp 
    | 27 -> NONTERM_TextProps 
    | 28 -> NONTERM_TextProps 
    | 29 -> NONTERM_TextProp 
    | 30 -> NONTERM_TextProp 
    | 31 -> NONTERM_TextProp 
    | 32 -> NONTERM_TextProp 
    | 33 -> NONTERM_TextProp 
    | 34 -> NONTERM_TextProp 
    | 35 -> NONTERM_TextProp 
    | 36 -> NONTERM_TextProp 
    | 37 -> NONTERM_TextProp 
    | 38 -> NONTERM_TextProp 
    | 39 -> NONTERM_TextProp 
    | 40 -> NONTERM_Color 
    | 41 -> NONTERM_Color 
    | 42 -> NONTERM_Color 
    | 43 -> NONTERM_Color 
    | 44 -> NONTERM_Color 
    | 45 -> NONTERM_Color 
    | 46 -> NONTERM_FontStyle 
    | 47 -> NONTERM_FontStyle 
    | 48 -> NONTERM_FontStyle 
    | 49 -> NONTERM_FontStyles 
    | 50 -> NONTERM_FontStyles 
    | 51 -> NONTERM_TextAlign 
    | 52 -> NONTERM_TextAlign 
    | 53 -> NONTERM_TextAlign 
    | 54 -> NONTERM_TextWrap 
    | 55 -> NONTERM_TextWrap 
    | 56 -> NONTERM_TextWrap 
    | 57 -> NONTERM_TextTrim 
    | 58 -> NONTERM_TextTrim 
    | 59 -> NONTERM_TextTrim 
    | 60 -> NONTERM_Padding 
    | 61 -> NONTERM_Padding 
    | 62 -> NONTERM_Functions 
    | 63 -> NONTERM_Functions 
    | 64 -> NONTERM_Function 
    | 65 -> NONTERM_Statements 
    | 66 -> NONTERM_Statements 
    | 67 -> NONTERM_Stmt 
    | 68 -> NONTERM_Stmt 
    | 69 -> NONTERM_Exp 
    | 70 -> NONTERM_Exp 
    | 71 -> NONTERM_Exp 
    | 72 -> NONTERM_Exp 
    | 73 -> NONTERM_Exp 
    | 74 -> NONTERM_Exp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 58 
let _fsyacc_tagOfErrorTerminal = 56

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF _ -> "EOF" 
  | COMMA _ -> "COMMA" 
  | LEFT_CURLY_BRACKET _ -> "LEFT_CURLY_BRACKET" 
  | RIGHT_CURLY_BRACKET _ -> "RIGHT_CURLY_BRACKET" 
  | COLON _ -> "COLON" 
  | LEFT_PAR _ -> "LEFT_PAR" 
  | RIGHT_PAR _ -> "RIGHT_PAR" 
  | EQUAL _ -> "EQUAL" 
  | WORD _ -> "WORD" 
  | CHARACTER _ -> "CHARACTER" 
  | NOTRIM _ -> "NOTRIM" 
  | OVERFLOW _ -> "OVERFLOW" 
  | WRAP _ -> "WRAP" 
  | FORCEWRAP _ -> "FORCEWRAP" 
  | CENTER _ -> "CENTER" 
  | LEFT _ -> "LEFT" 
  | RIGHT _ -> "RIGHT" 
  | RED _ -> "RED" 
  | BLUE _ -> "BLUE" 
  | GREEN _ -> "GREEN" 
  | YELLOW _ -> "YELLOW" 
  | PINK _ -> "PINK" 
  | ITALIC _ -> "ITALIC" 
  | UNDERLINE _ -> "UNDERLINE" 
  | STRIKETHROUGH _ -> "STRIKETHROUGH" 
  | FOREGROUND _ -> "FOREGROUND" 
  | BACKGROUND _ -> "BACKGROUND" 
  | FONTFAMILY _ -> "FONTFAMILY" 
  | FONTSIZE _ -> "FONTSIZE" 
  | FONTWEIGHT _ -> "FONTWEIGHT" 
  | FONTSTYLE _ -> "FONTSTYLE" 
  | PADDING _ -> "PADDING" 
  | LINEHEIGHT _ -> "LINEHEIGHT" 
  | TEXTALIGN _ -> "TEXTALIGN" 
  | TEXTWRAP _ -> "TEXTWRAP" 
  | TEXTTRIM _ -> "TEXTTRIM" 
  | IS_VISIBLE _ -> "IS_VISIBLE" 
  | TRUE _ -> "TRUE" 
  | FALSE _ -> "FALSE" 
  | WIDTH _ -> "WIDTH" 
  | HEIGHT _ -> "HEIGHT" 
  | FUNCTION _ -> "FUNCTION" 
  | LET _ -> "LET" 
  | WINDOW _ -> "WINDOW" 
  | BUTTON _ -> "BUTTON" 
  | TEXT _ -> "TEXT" 
  | TEXTBOX _ -> "TEXTBOX" 
  | CHECKBOX _ -> "CHECKBOX" 
  | RADIOBUTTON _ -> "RADIOBUTTON" 
  | CALENDAR _ -> "CALENDAR" 
  | TOGGLEBUTTON _ -> "TOGGLEBUTTON" 
  | TOGGLESWITCH _ -> "TOGGLESWITCH" 
  | ID _ -> "ID" 
  | STRINGLIT _ -> "STRINGLIT" 
  | HEXCOLOR _ -> "HEXCOLOR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_CURLY_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_CURLY_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_PAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_PAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WORD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHARACTER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOTRIM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OVERFLOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WRAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FORCEWRAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CENTER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BLUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GREEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | YELLOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PINK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ITALIC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNDERLINE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRIKETHROUGH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FOREGROUND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BACKGROUND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FONTFAMILY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FONTSIZE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FONTWEIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FONTSTYLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PADDING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LINEHEIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTALIGN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTWRAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTTRIM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IS_VISIBLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WIDTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HEIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNCTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WINDOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTBOX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHECKBOX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RADIOBUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CALENDAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOGGLEBUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOGGLESWITCH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HEXCOLOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;2us;65535us;9us;10us;14us;15us;0us;65535us;2us;65535us;9us;14us;14us;14us;2us;65535us;18us;19us;36us;37us;2us;65535us;18us;36us;36us;36us;2us;65535us;23us;24us;48us;49us;2us;65535us;23us;48us;48us;48us;2us;65535us;51us;52us;54us;55us;2us;65535us;66us;92us;92us;92us;2us;65535us;66us;67us;92us;93us;1us;65535us;75us;76us;1us;65535us;78us;79us;1us;65535us;81us;82us;1us;65535us;69us;70us;2us;65535us;10us;12us;110us;111us;2us;65535us;10us;110us;110us;110us;2us;65535us;116us;117us;119us;120us;2us;65535us;116us;119us;119us;119us;3us;65535us;116us;125us;119us;125us;123us;124us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;8us;9us;12us;15us;18us;21us;24us;27us;30us;33us;35us;37us;39us;41us;44us;47us;50us;53us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;3us;1us;5us;6us;1us;1us;3us;2us;3us;4us;3us;2us;3us;4us;2us;3us;4us;2us;3us;4us;1us;4us;2us;5us;6us;2us;5us;6us;1us;5us;1us;6us;1us;6us;2us;7us;8us;1us;7us;2us;11us;12us;2us;11us;12us;1us;12us;1us;12us;1us;12us;2us;13us;14us;2us;13us;14us;1us;14us;1us;14us;1us;14us;1us;15us;1us;15us;1us;16us;1us;16us;1us;17us;1us;17us;1us;18us;1us;18us;1us;19us;1us;20us;2us;21us;22us;1us;21us;2us;23us;24us;2us;23us;24us;1us;23us;1us;24us;1us;25us;1us;25us;1us;25us;1us;26us;1us;26us;1us;26us;2us;27us;28us;1us;27us;1us;29us;1us;29us;1us;29us;1us;30us;1us;30us;1us;30us;1us;31us;1us;31us;1us;31us;1us;32us;1us;32us;1us;32us;1us;33us;1us;33us;1us;33us;1us;34us;1us;34us;1us;34us;1us;35us;1us;35us;1us;35us;1us;36us;1us;36us;1us;36us;1us;37us;1us;37us;1us;37us;1us;38us;1us;38us;1us;38us;1us;39us;1us;39us;1us;39us;1us;40us;1us;41us;1us;42us;1us;43us;1us;44us;1us;45us;1us;46us;1us;47us;1us;48us;2us;49us;50us;1us;49us;1us;51us;1us;52us;1us;53us;1us;54us;1us;55us;1us;56us;1us;57us;1us;58us;1us;59us;2us;60us;61us;2us;60us;61us;2us;60us;61us;1us;60us;1us;60us;1us;60us;1us;60us;2us;62us;63us;1us;62us;1us;64us;1us;64us;1us;64us;1us;64us;1us;64us;1us;64us;1us;64us;2us;65us;66us;1us;65us;1us;67us;1us;67us;1us;67us;1us;67us;1us;68us;1us;69us;1us;70us;2us;71us;74us;1us;72us;1us;73us;1us;74us;1us;74us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;8us;10us;14us;18us;21us;24us;26us;29us;32us;34us;36us;38us;41us;43us;46us;49us;51us;53us;55us;58us;61us;63us;65us;67us;69us;71us;73us;75us;77us;79us;81us;83us;85us;87us;90us;92us;95us;98us;100us;102us;104us;106us;108us;110us;112us;114us;117us;119us;121us;123us;125us;127us;129us;131us;133us;135us;137us;139us;141us;143us;145us;147us;149us;151us;153us;155us;157us;159us;161us;163us;165us;167us;169us;171us;173us;175us;177us;179us;181us;183us;185us;187us;189us;191us;193us;195us;197us;199us;201us;203us;206us;208us;210us;212us;214us;216us;218us;220us;222us;224us;226us;229us;232us;235us;237us;239us;241us;243us;246us;248us;250us;252us;254us;256us;258us;260us;262us;265us;267us;269us;271us;273us;275us;277us;279us;281us;284us;286us;288us;290us;|]
let _fsyacc_action_rows = 133
let _fsyacc_actionTableElements = [|1us;32768us;43us;4us;0us;49152us;2us;32768us;0us;3us;2us;9us;0us;16385us;1us;32768us;53us;5us;1us;16386us;55us;6us;1us;32768us;55us;7us;1us;16387us;53us;8us;0us;16388us;8us;32768us;44us;16us;45us;21us;46us;26us;47us;28us;48us;30us;49us;34us;50us;35us;51us;32us;2us;32768us;3us;11us;41us;112us;0us;16389us;1us;32768us;3us;13us;0us;16390us;8us;16392us;44us;16us;45us;21us;46us;26us;47us;28us;48us;30us;49us;34us;50us;35us;51us;32us;0us;16391us;1us;32768us;53us;17us;1us;16395us;2us;18us;3us;32768us;36us;38us;39us;42us;40us;45us;1us;32768us;3us;20us;0us;16396us;1us;32768us;53us;22us;1us;16397us;2us;23us;11us;32768us;25us;50us;26us;53us;27us;56us;28us;59us;29us;62us;30us;65us;31us;68us;32us;71us;33us;74us;34us;77us;35us;80us;1us;32768us;3us;25us;0us;16398us;1us;32768us;53us;27us;0us;16399us;1us;32768us;53us;29us;0us;16400us;1us;32768us;53us;31us;0us;16401us;1us;32768us;53us;33us;0us;16402us;0us;16403us;0us;16404us;3us;16406us;36us;38us;39us;42us;40us;45us;0us;16405us;1us;32768us;4us;39us;2us;32768us;37us;40us;38us;41us;0us;16407us;0us;16408us;1us;32768us;4us;43us;1us;32768us;55us;44us;0us;16409us;1us;32768us;4us;46us;1us;32768us;55us;47us;0us;16410us;11us;16412us;25us;50us;26us;53us;27us;56us;28us;59us;29us;62us;30us;65us;31us;68us;32us;71us;33us;74us;34us;77us;35us;80us;0us;16411us;1us;32768us;4us;51us;6us;32768us;17us;84us;18us;85us;19us;86us;20us;87us;21us;88us;54us;83us;0us;16413us;1us;32768us;4us;54us;6us;32768us;17us;84us;18us;85us;19us;86us;20us;87us;21us;88us;54us;83us;0us;16414us;1us;32768us;4us;57us;1us;32768us;53us;58us;0us;16415us;1us;32768us;4us;60us;1us;32768us;55us;61us;0us;16416us;1us;32768us;4us;63us;1us;32768us;55us;64us;0us;16417us;1us;32768us;4us;66us;3us;32768us;22us;89us;23us;90us;24us;91us;0us;16418us;1us;32768us;4us;69us;1us;32768us;55us;103us;0us;16419us;1us;32768us;4us;72us;1us;32768us;55us;73us;0us;16420us;1us;32768us;4us;75us;3us;32768us;14us;94us;15us;95us;16us;96us;0us;16421us;1us;32768us;4us;78us;3us;32768us;11us;97us;12us;98us;13us;99us;0us;16422us;1us;32768us;4us;81us;3us;32768us;8us;100us;9us;101us;10us;102us;0us;16423us;0us;16424us;0us;16425us;0us;16426us;0us;16427us;0us;16428us;0us;16429us;0us;16430us;0us;16431us;0us;16432us;3us;16434us;22us;89us;23us;90us;24us;91us;0us;16433us;0us;16435us;0us;16436us;0us;16437us;0us;16438us;0us;16439us;0us;16440us;0us;16441us;0us;16442us;0us;16443us;1us;32768us;1us;104us;1us;32768us;55us;105us;1us;16445us;1us;106us;1us;32768us;55us;107us;1us;32768us;1us;108us;1us;32768us;55us;109us;0us;16444us;1us;16447us;41us;112us;0us;16446us;1us;32768us;52us;113us;1us;32768us;5us;114us;1us;32768us;6us;115us;1us;32768us;2us;116us;6us;32768us;37us;129us;38us;130us;42us;121us;52us;128us;53us;127us;55us;126us;1us;32768us;3us;118us;0us;16448us;6us;16450us;37us;129us;38us;130us;42us;121us;52us;128us;53us;127us;55us;126us;0us;16449us;1us;32768us;52us;122us;1us;32768us;7us;123us;5us;32768us;37us;129us;38us;130us;52us;128us;53us;127us;55us;126us;0us;16451us;0us;16452us;0us;16453us;0us;16454us;1us;16455us;5us;131us;0us;16456us;0us;16457us;1us;32768us;6us;132us;0us;16458us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;6us;7us;9us;11us;13us;15us;16us;25us;28us;29us;31us;32us;41us;42us;44us;46us;50us;52us;53us;55us;57us;69us;71us;72us;74us;75us;77us;78us;80us;81us;83us;84us;85us;86us;90us;91us;93us;96us;97us;98us;100us;102us;103us;105us;107us;108us;120us;121us;123us;130us;131us;133us;140us;141us;143us;145us;146us;148us;150us;151us;153us;155us;156us;158us;162us;163us;165us;167us;168us;170us;172us;173us;175us;179us;180us;182us;186us;187us;189us;193us;194us;195us;196us;197us;198us;199us;200us;201us;202us;203us;207us;208us;209us;210us;211us;212us;213us;214us;215us;216us;217us;219us;221us;223us;225us;227us;229us;230us;232us;233us;235us;237us;239us;241us;248us;250us;251us;258us;259us;261us;263us;269us;270us;271us;272us;273us;275us;276us;277us;279us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;2us;4us;5us;4us;5us;2us;1us;2us;1us;2us;5us;2us;5us;2us;2us;2us;2us;1us;1us;2us;1us;3us;3us;3us;3us;2us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;7us;3us;2us;1us;7us;2us;1us;4us;1us;1us;1us;1us;1us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;3us;3us;4us;4us;5us;5us;5us;5us;5us;5us;5us;5us;5us;5us;6us;6us;7us;7us;7us;7us;8us;8us;9us;9us;9us;9us;9us;9us;9us;9us;9us;9us;9us;10us;10us;10us;10us;10us;10us;11us;11us;11us;12us;12us;13us;13us;13us;14us;14us;14us;15us;15us;15us;16us;16us;17us;17us;18us;19us;19us;20us;20us;21us;21us;21us;21us;21us;21us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;16389us;65535us;16390us;65535us;16391us;65535us;65535us;65535us;65535us;16396us;65535us;65535us;65535us;65535us;16398us;65535us;16399us;65535us;16400us;65535us;16401us;65535us;16402us;16403us;16404us;65535us;16405us;65535us;65535us;16407us;16408us;65535us;65535us;16409us;65535us;65535us;16410us;65535us;16411us;65535us;65535us;16413us;65535us;65535us;16414us;65535us;65535us;16415us;65535us;65535us;16416us;65535us;65535us;16417us;65535us;65535us;16418us;65535us;65535us;16419us;65535us;65535us;16420us;65535us;65535us;16421us;65535us;65535us;16422us;65535us;65535us;16423us;16424us;16425us;16426us;16427us;16428us;16429us;16430us;16431us;16432us;65535us;16433us;16435us;16436us;16437us;16438us;16439us;16440us;16441us;16442us;16443us;65535us;65535us;65535us;65535us;65535us;65535us;16444us;65535us;16446us;65535us;65535us;65535us;65535us;65535us;65535us;16448us;65535us;16449us;65535us;65535us;65535us;16451us;16452us;16453us;16454us;65535us;16456us;16457us;65535us;16458us;|]
let _fsyacc_reductions = lazy [|
# 527 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 536 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            let _2 = parseState.GetInput(2) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                         _1 
                   )
# 80 "Parser.fsy"
                 : AbSyn.Window));
# 548 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                 Window (fst _2, None, None, None, [], [], _1) 
                   )
# 84 "Parser.fsy"
                 : AbSyn.Window));
# 560 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                    Window (fst _2, Some (fst _3), Some (fst _4), None, [], [], _1) 
                   )
# 85 "Parser.fsy"
                 : AbSyn.Window));
# 574 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> int * Position in
            let _5 = parseState.GetInput(5) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                              Window (fst _2, Some (fst _3), Some (fst _4), Some (fst _5), [], [], _1) 
                   )
# 86 "Parser.fsy"
                 : AbSyn.Window));
# 589 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UIElement list in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                                                    add_ui_elements _1 _3 
                   )
# 87 "Parser.fsy"
                 : AbSyn.Window));
# 603 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UIElement list in
            let _4 = parseState.GetInput(4) :?> 'gentype_Functions in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                                                              construct_window _1 _3 _4 
                   )
# 88 "Parser.fsy"
                 : AbSyn.Window));
# 618 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UIElement in
            let _2 = parseState.GetInput(2) :?> AbSyn.UIElement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                         _1 :: _2 
                   )
# 92 "Parser.fsy"
                 : AbSyn.UIElement list));
# 630 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UIElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                         [_1] 
                   )
# 93 "Parser.fsy"
                 : AbSyn.UIElement list));
# 641 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.FunctionT in
            let _2 = parseState.GetInput(2) :?> 'gentype_Funcs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                              _1 :: _2 
                   )
# 97 "Parser.fsy"
                 : 'gentype_Funcs));
# 653 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.FunctionT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                              [_1] 
                   )
# 98 "Parser.fsy"
                 : 'gentype_Funcs));
# 664 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                    Button (fst _2, default_button_props _1, _1) 
                   )
# 101 "Parser.fsy"
                 : AbSyn.UIElement));
# 676 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.ButtonProp list in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                                                               Button (fst _2, _4, _1) 
                   )
# 102 "Parser.fsy"
                 : AbSyn.UIElement));
# 691 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                          TextBlock (fst _2, default_text_props _1 ,_1) 
                   )
# 103 "Parser.fsy"
                 : AbSyn.UIElement));
# 703 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.TextBlockProp list in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                                           TextBlock (fst _2, _4, _1) 
                   )
# 104 "Parser.fsy"
                 : AbSyn.UIElement));
# 718 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                             TextBox (fst _2, _1) 
                   )
# 105 "Parser.fsy"
                 : AbSyn.UIElement));
# 730 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                              CheckBox (fst _2, _1) 
                   )
# 106 "Parser.fsy"
                 : AbSyn.UIElement));
# 742 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                 RadioButton (fst _2, _1) 
                   )
# 107 "Parser.fsy"
                 : AbSyn.UIElement));
# 754 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                  ToggleSwitch (fst _2, _1) 
                   )
# 108 "Parser.fsy"
                 : AbSyn.UIElement));
# 766 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                    Calendar _1 
                   )
# 109 "Parser.fsy"
                 : AbSyn.UIElement));
# 777 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                        ToggleButton _1 
                   )
# 110 "Parser.fsy"
                 : AbSyn.UIElement));
# 788 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.ButtonProp in
            let _2 = parseState.GetInput(2) :?> AbSyn.ButtonProp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                            _1 :: _2 
                   )
# 114 "Parser.fsy"
                 : AbSyn.ButtonProp list));
# 800 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.ButtonProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                 [_1] 
                   )
# 115 "Parser.fsy"
                 : AbSyn.ButtonProp list));
# 811 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                           IsVisible (true, _1) 
                   )
# 118 "Parser.fsy"
                 : AbSyn.ButtonProp));
# 824 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                  IsVisible (false, _1) 
                   )
# 119 "Parser.fsy"
                 : AbSyn.ButtonProp));
# 837 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                  Width (fst _3, _1) 
                   )
# 120 "Parser.fsy"
                 : AbSyn.ButtonProp));
# 850 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                  Height (fst _3, _1) 
                   )
# 121 "Parser.fsy"
                 : AbSyn.ButtonProp));
# 863 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.TextBlockProp in
            let _2 = parseState.GetInput(2) :?> AbSyn.TextBlockProp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                      _1 :: _2 
                   )
# 125 "Parser.fsy"
                 : AbSyn.TextBlockProp list));
# 875 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.TextBlockProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                              [_1] 
                   )
# 126 "Parser.fsy"
                 : AbSyn.TextBlockProp list));
# 886 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.ColorT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                         Foreground (_3, _1) 
                   )
# 129 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 899 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.ColorT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                                  Background (_3, _1) 
                   )
# 130 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 912 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                      FontFamily (fst _3, _1) 
                   )
# 131 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 925 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                                      FontSize (fst _3, _1) 
                   )
# 132 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 938 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                      FontWeight (fst _3, _1) 
                   )
# 133 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 951 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_FontStyles in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                      FontStyle (List.rev _3, _1) 
                   )
# 134 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 964 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_Padding in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                      Padding (_3, _1) 
                   )
# 135 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 977 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                      LineHeight (fst _3, _1) 
                   )
# 136 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 990 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_TextAlign in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                      TextAlign (_3, _1) 
                   )
# 137 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1003 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_TextWrap in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                      TextWrap (_3, _1) 
                   )
# 138 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1016 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_TextTrim in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                      TextTrim (_3, _1) 
                   )
# 139 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1029 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                 
                         match parse_hex_code (fst _1) with
                         | Some rgba -> Hex (rgba, snd _1)
                         | None -> failwithf "Invalid hex color: %s" (fst _1)
                       
                   )
# 144 "Parser.fsy"
                 : AbSyn.ColorT));
# 1044 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                  ColorName (Red, _1) 
                   )
# 149 "Parser.fsy"
                 : AbSyn.ColorT));
# 1055 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                  ColorName (Blue, _1) 
                   )
# 150 "Parser.fsy"
                 : AbSyn.ColorT));
# 1066 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                  ColorName (Green, _1) 
                   )
# 151 "Parser.fsy"
                 : AbSyn.ColorT));
# 1077 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                  ColorName (Yellow, _1) 
                   )
# 152 "Parser.fsy"
                 : AbSyn.ColorT));
# 1088 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                  ColorName (Pink, _1) 
                   )
# 153 "Parser.fsy"
                 : AbSyn.ColorT));
# 1099 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                 Italic 
                   )
# 157 "Parser.fsy"
                 : 'gentype_FontStyle));
# 1110 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                         Underline 
                   )
# 158 "Parser.fsy"
                 : 'gentype_FontStyle));
# 1121 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                         StrikeThrough 
                   )
# 159 "Parser.fsy"
                 : 'gentype_FontStyle));
# 1132 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_FontStyle in
            let _2 = parseState.GetInput(2) :?> 'gentype_FontStyles in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                         _1 :: _2 
                   )
# 162 "Parser.fsy"
                 : 'gentype_FontStyles));
# 1144 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_FontStyle in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                               [_1] 
                   )
# 163 "Parser.fsy"
                 : 'gentype_FontStyles));
# 1155 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                          Center 
                   )
# 167 "Parser.fsy"
                 : 'gentype_TextAlign));
# 1166 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                  Left 
                   )
# 168 "Parser.fsy"
                 : 'gentype_TextAlign));
# 1177 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                  Right 
                   )
# 169 "Parser.fsy"
                 : 'gentype_TextAlign));
# 1188 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                             Overflow 
                   )
# 172 "Parser.fsy"
                 : 'gentype_TextWrap));
# 1199 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                      Wrap 
                   )
# 173 "Parser.fsy"
                 : 'gentype_TextWrap));
# 1210 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                      ForceWrap 
                   )
# 174 "Parser.fsy"
                 : 'gentype_TextWrap));
# 1221 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                            Word 
                   )
# 177 "Parser.fsy"
                 : 'gentype_TextTrim));
# 1232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                     Character 
                   )
# 178 "Parser.fsy"
                 : 'gentype_TextTrim));
# 1243 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                     NoTrim 
                   )
# 179 "Parser.fsy"
                 : 'gentype_TextTrim));
# 1254 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> int * Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                                   Uniform (fst _1, fst _3, fst _5, fst _7) 
                   )
# 182 "Parser.fsy"
                 : 'gentype_Padding));
# 1271 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                                   Symmetric (fst _1, fst _3) 
                   )
# 183 "Parser.fsy"
                 : 'gentype_Padding));
# 1284 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.FunctionT in
            let _2 = parseState.GetInput(2) :?> 'gentype_Functions in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                      _1 :: _2 
                   )
# 186 "Parser.fsy"
                 : 'gentype_Functions));
# 1296 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.FunctionT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                                                      [_1] 
                   )
# 187 "Parser.fsy"
                 : 'gentype_Functions));
# 1307 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.Stmt list in
            let _7 = parseState.GetInput(7) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                                                                                   AbSyn.Function (fst _2, _6, _1) 
                   )
# 190 "Parser.fsy"
                 : AbSyn.FunctionT));
# 1324 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Stmt in
            let _2 = parseState.GetInput(2) :?> AbSyn.Stmt list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                    _1 :: _2 
                   )
# 193 "Parser.fsy"
                 : AbSyn.Stmt list));
# 1336 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                                    [_1] 
                   )
# 194 "Parser.fsy"
                 : AbSyn.Stmt list));
# 1347 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.Exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                               Let (fst _2, _4, _1) 
                   )
# 197 "Parser.fsy"
                 : AbSyn.Stmt));
# 1361 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                               ExprStmt (_1, match _1 with Constant(_,pos) | Var(_,pos) | Call(_,pos) -> pos) 
                   )
# 198 "Parser.fsy"
                 : AbSyn.Stmt));
# 1372 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                       Constant (Int (fst _1), snd _1) 
                   )
# 202 "Parser.fsy"
                 : AbSyn.Exp));
# 1383 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                       Constant (String (fst _1), snd _1) 
                   )
# 203 "Parser.fsy"
                 : AbSyn.Exp));
# 1394 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                       Var _1 
                   )
# 204 "Parser.fsy"
                 : AbSyn.Exp));
# 1405 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                       Constant (Bool true, _1) 
                   )
# 205 "Parser.fsy"
                 : AbSyn.Exp));
# 1416 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                       Constant (Bool false, _1) 
                   )
# 206 "Parser.fsy"
                 : AbSyn.Exp));
# 1427 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                   Call (fst _1, snd _1) 
                   )
# 207 "Parser.fsy"
                 : AbSyn.Exp));
|]
# 1441 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 59;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.Window =
    engine lexer lexbuf 0 :?> _
