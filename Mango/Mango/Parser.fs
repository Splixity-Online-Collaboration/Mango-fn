// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )

let add_ui_elements window elements = 
  match window with
  | Window (name, width, height, icon, _, pos) -> Window (name, width, height, icon, elements, pos)

let default_button_props pos = [IsVisible (true, pos) ]


# 32 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF of (Position)
  | COMMA of (Position)
  | LEFT_CURLY_BRACKET of (Position)
  | RIGHT_CURLY_BRACKET of (Position)
  | COLON of (Position)
  | LEFT_PAR of (Position)
  | RIGHT_PAR of (Position)
  | EQUAL of (Position)
  | IS_VISIBILE of (Position)
  | TRUE of (Position)
  | FALSE of (Position)
  | WIDTH of (Position)
  | HEIGHT of (Position)
  | FUNCTION of (Position)
  | LET of (Position)
  | BUTTON of (Position)
  | TEXT of (Position)
  | TEXTBOX of (Position)
  | CHECKBOX of (Position)
  | RADIOBUTTON of (Position)
  | CALENDAR of (Position)
  | TOGGLEBUTTON of (Position)
  | TOGGLESWITCH of (Position)
  | WINDOW of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | NUM of (int * Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_LEFT_CURLY_BRACKET
    | TOKEN_RIGHT_CURLY_BRACKET
    | TOKEN_COLON
    | TOKEN_LEFT_PAR
    | TOKEN_RIGHT_PAR
    | TOKEN_EQUAL
    | TOKEN_IS_VISIBILE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_WIDTH
    | TOKEN_HEIGHT
    | TOKEN_FUNCTION
    | TOKEN_LET
    | TOKEN_BUTTON
    | TOKEN_TEXT
    | TOKEN_TEXTBOX
    | TOKEN_CHECKBOX
    | TOKEN_RADIOBUTTON
    | TOKEN_CALENDAR
    | TOKEN_TOGGLEBUTTON
    | TOKEN_TOGGLESWITCH
    | TOKEN_WINDOW
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_Window
    | NONTERM_UIElements
    | NONTERM_ButtonProps
    | NONTERM_UIElement
    | NONTERM_ButtonProp
    | NONTERM_Function
    | NONTERM_Statements
    | NONTERM_Stmt
    | NONTERM_Exp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF _ -> 0 
  | COMMA _ -> 1 
  | LEFT_CURLY_BRACKET _ -> 2 
  | RIGHT_CURLY_BRACKET _ -> 3 
  | COLON _ -> 4 
  | LEFT_PAR _ -> 5 
  | RIGHT_PAR _ -> 6 
  | EQUAL _ -> 7 
  | IS_VISIBILE _ -> 8 
  | TRUE _ -> 9 
  | FALSE _ -> 10 
  | WIDTH _ -> 11 
  | HEIGHT _ -> 12 
  | FUNCTION _ -> 13 
  | LET _ -> 14 
  | BUTTON _ -> 15 
  | TEXT _ -> 16 
  | TEXTBOX _ -> 17 
  | CHECKBOX _ -> 18 
  | RADIOBUTTON _ -> 19 
  | CALENDAR _ -> 20 
  | TOGGLEBUTTON _ -> 21 
  | TOGGLESWITCH _ -> 22 
  | WINDOW _ -> 23 
  | ID _ -> 24 
  | STRINGLIT _ -> 25 
  | NUM _ -> 26 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_LEFT_CURLY_BRACKET 
  | 3 -> TOKEN_RIGHT_CURLY_BRACKET 
  | 4 -> TOKEN_COLON 
  | 5 -> TOKEN_LEFT_PAR 
  | 6 -> TOKEN_RIGHT_PAR 
  | 7 -> TOKEN_EQUAL 
  | 8 -> TOKEN_IS_VISIBILE 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_WIDTH 
  | 12 -> TOKEN_HEIGHT 
  | 13 -> TOKEN_FUNCTION 
  | 14 -> TOKEN_LET 
  | 15 -> TOKEN_BUTTON 
  | 16 -> TOKEN_TEXT 
  | 17 -> TOKEN_TEXTBOX 
  | 18 -> TOKEN_CHECKBOX 
  | 19 -> TOKEN_RADIOBUTTON 
  | 20 -> TOKEN_CALENDAR 
  | 21 -> TOKEN_TOGGLEBUTTON 
  | 22 -> TOKEN_TOGGLESWITCH 
  | 23 -> TOKEN_WINDOW 
  | 24 -> TOKEN_ID 
  | 25 -> TOKEN_STRINGLIT 
  | 26 -> TOKEN_NUM 
  | 29 -> TOKEN_end_of_input
  | 27 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_Window 
    | 3 -> NONTERM_Window 
    | 4 -> NONTERM_Window 
    | 5 -> NONTERM_Window 
    | 6 -> NONTERM_UIElements 
    | 7 -> NONTERM_UIElements 
    | 8 -> NONTERM_ButtonProps 
    | 9 -> NONTERM_ButtonProps 
    | 10 -> NONTERM_UIElement 
    | 11 -> NONTERM_UIElement 
    | 12 -> NONTERM_UIElement 
    | 13 -> NONTERM_UIElement 
    | 14 -> NONTERM_UIElement 
    | 15 -> NONTERM_UIElement 
    | 16 -> NONTERM_UIElement 
    | 17 -> NONTERM_UIElement 
    | 18 -> NONTERM_UIElement 
    | 19 -> NONTERM_ButtonProp 
    | 20 -> NONTERM_ButtonProp 
    | 21 -> NONTERM_ButtonProp 
    | 22 -> NONTERM_ButtonProp 
    | 23 -> NONTERM_Function 
    | 24 -> NONTERM_Statements 
    | 25 -> NONTERM_Statements 
    | 26 -> NONTERM_Stmt 
    | 27 -> NONTERM_Exp 
    | 28 -> NONTERM_Exp 
    | 29 -> NONTERM_Exp 
    | 30 -> NONTERM_Exp 
    | 31 -> NONTERM_Exp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 29 
let _fsyacc_tagOfErrorTerminal = 27

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF _ -> "EOF" 
  | COMMA _ -> "COMMA" 
  | LEFT_CURLY_BRACKET _ -> "LEFT_CURLY_BRACKET" 
  | RIGHT_CURLY_BRACKET _ -> "RIGHT_CURLY_BRACKET" 
  | COLON _ -> "COLON" 
  | LEFT_PAR _ -> "LEFT_PAR" 
  | RIGHT_PAR _ -> "RIGHT_PAR" 
  | EQUAL _ -> "EQUAL" 
  | IS_VISIBILE _ -> "IS_VISIBILE" 
  | TRUE _ -> "TRUE" 
  | FALSE _ -> "FALSE" 
  | WIDTH _ -> "WIDTH" 
  | HEIGHT _ -> "HEIGHT" 
  | FUNCTION _ -> "FUNCTION" 
  | LET _ -> "LET" 
  | BUTTON _ -> "BUTTON" 
  | TEXT _ -> "TEXT" 
  | TEXTBOX _ -> "TEXTBOX" 
  | CHECKBOX _ -> "CHECKBOX" 
  | RADIOBUTTON _ -> "RADIOBUTTON" 
  | CALENDAR _ -> "CALENDAR" 
  | TOGGLEBUTTON _ -> "TOGGLEBUTTON" 
  | TOGGLESWITCH _ -> "TOGGLESWITCH" 
  | WINDOW _ -> "WINDOW" 
  | ID _ -> "ID" 
  | STRINGLIT _ -> "STRINGLIT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_CURLY_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_CURLY_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_PAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_PAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IS_VISIBILE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WIDTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HEIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNCTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTBOX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHECKBOX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RADIOBUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CALENDAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOGGLEBUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOGGLESWITCH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WINDOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;2us;65535us;9us;10us;12us;13us;2us;65535us;14us;15us;18us;19us;2us;65535us;9us;12us;12us;12us;2us;65535us;14us;14us;18us;14us;0us;65535us;0us;65535us;0us;65535us;0us;65535us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;8us;11us;14us;17us;18us;19us;20us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;2us;1us;5us;1us;1us;3us;2us;3us;4us;3us;2us;3us;4us;2us;3us;4us;2us;3us;4us;1us;4us;1us;5us;1us;5us;1us;5us;2us;6us;7us;1us;6us;2us;8us;9us;1us;8us;2us;10us;11us;2us;10us;11us;1us;11us;1us;11us;1us;11us;1us;12us;1us;12us;1us;13us;1us;13us;1us;14us;1us;14us;1us;15us;1us;15us;1us;16us;1us;16us;1us;17us;1us;18us;2us;19us;20us;2us;19us;20us;1us;19us;1us;20us;1us;21us;1us;21us;1us;21us;1us;22us;1us;22us;1us;22us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;7us;9us;13us;17us;20us;23us;25us;27us;29us;31us;34us;36us;39us;41us;44us;47us;49us;51us;53us;55us;57us;59us;61us;63us;65us;67us;69us;71us;73us;75us;77us;80us;83us;85us;87us;89us;91us;93us;95us;97us;|]
let _fsyacc_action_rows = 43
let _fsyacc_actionTableElements = [|1us;32768us;23us;4us;0us;49152us;2us;32768us;0us;3us;2us;9us;0us;16385us;1us;32768us;25us;5us;1us;16386us;26us;6us;1us;32768us;26us;7us;1us;16387us;25us;8us;0us;16388us;8us;32768us;15us;16us;16us;21us;17us;23us;18us;25us;19us;27us;20us;31us;21us;32us;22us;29us;1us;32768us;3us;11us;0us;16389us;8us;16391us;15us;16us;16us;21us;17us;23us;18us;25us;19us;27us;20us;31us;21us;32us;22us;29us;0us;16390us;3us;16393us;8us;33us;11us;37us;12us;40us;0us;16392us;1us;32768us;25us;17us;1us;16394us;2us;18us;3us;32768us;8us;33us;11us;37us;12us;40us;1us;32768us;3us;20us;0us;16395us;1us;32768us;25us;22us;0us;16396us;1us;32768us;25us;24us;0us;16397us;1us;32768us;25us;26us;0us;16398us;1us;32768us;25us;28us;0us;16399us;1us;32768us;25us;30us;0us;16400us;0us;16401us;0us;16402us;1us;32768us;4us;34us;2us;32768us;9us;35us;10us;36us;0us;16403us;0us;16404us;1us;32768us;4us;38us;1us;32768us;26us;39us;0us;16405us;1us;32768us;4us;41us;1us;32768us;26us;42us;0us;16406us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;6us;7us;9us;11us;13us;15us;16us;25us;27us;28us;37us;38us;42us;43us;45us;47us;51us;53us;54us;56us;57us;59us;60us;62us;63us;65us;66us;68us;69us;70us;71us;73us;76us;77us;78us;80us;82us;83us;85us;87us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;2us;4us;5us;4us;2us;1us;2us;1us;2us;5us;2us;2us;2us;2us;2us;1us;1us;3us;3us;3us;3us;7us;2us;1us;4us;1us;1us;1us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;3us;3us;4us;4us;5us;5us;5us;5us;5us;5us;5us;5us;5us;6us;6us;6us;6us;7us;8us;8us;9us;10us;10us;10us;10us;10us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;16389us;65535us;16390us;65535us;16392us;65535us;65535us;65535us;65535us;16395us;65535us;16396us;65535us;16397us;65535us;16398us;65535us;16399us;65535us;16400us;16401us;16402us;65535us;65535us;16403us;16404us;65535us;65535us;16405us;65535us;65535us;16406us;|]
let _fsyacc_reductions = lazy [|
# 284 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 293 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            let _2 = parseState.GetInput(2) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                              _1 
                   )
# 50 "Parser.fsy"
                 : AbSyn.Window));
# 305 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                  Window (fst _2, None, None, None, [], _1) 
                   )
# 53 "Parser.fsy"
                 : AbSyn.Window));
# 317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                      Window (fst _2, Some (fst _3), Some (fst _4), None, [], _1) 
                   )
# 54 "Parser.fsy"
                 : AbSyn.Window));
# 331 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> int * Position in
            let _5 = parseState.GetInput(5) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                                Window (fst _2, Some (fst _3), Some (fst _4), Some (fst _5), [], _1) 
                   )
# 55 "Parser.fsy"
                 : AbSyn.Window));
# 346 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UIElement list in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                                                      add_ui_elements _1 _3 
                   )
# 56 "Parser.fsy"
                 : AbSyn.Window));
# 360 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UIElement in
            let _2 = parseState.GetInput(2) :?> AbSyn.UIElement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                               _1 :: _2 
                   )
# 59 "Parser.fsy"
                 : AbSyn.UIElement list));
# 372 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UIElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                               _1 :: [] 
                   )
# 60 "Parser.fsy"
                 : AbSyn.UIElement list));
# 383 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.ButtonProp in
            let _2 = parseState.GetInput(2) :?> AbSyn.ButtonProp list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                               _1 :: _2 
                   )
# 63 "Parser.fsy"
                 : AbSyn.ButtonProp list));
# 395 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.ButtonProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                               _1 :: [] 
                   )
# 64 "Parser.fsy"
                 : AbSyn.ButtonProp list));
# 406 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                    Button (fst _2, default_button_props _1, _1) 
                   )
# 67 "Parser.fsy"
                 : AbSyn.UIElement));
# 418 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.ButtonProp list in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                                                                       Button (fst _2, _4, _1) 
                   )
# 68 "Parser.fsy"
                 : AbSyn.UIElement));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                  TextBlock (fst _2, _1) 
                   )
# 69 "Parser.fsy"
                 : AbSyn.UIElement));
# 445 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                     TextBox (fst _2, _1) 
                   )
# 70 "Parser.fsy"
                 : AbSyn.UIElement));
# 457 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                      CheckBox (fst _2, _1) 
                   )
# 71 "Parser.fsy"
                 : AbSyn.UIElement));
# 469 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                         RadioButton (fst _2, _1) 
                   )
# 72 "Parser.fsy"
                 : AbSyn.UIElement));
# 481 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                          ToggleSwitch (fst _2, _1) 
                   )
# 73 "Parser.fsy"
                 : AbSyn.UIElement));
# 493 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                            Calendar _1 
                   )
# 74 "Parser.fsy"
                 : AbSyn.UIElement));
# 504 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                ToggleButton _1 
                   )
# 75 "Parser.fsy"
                 : AbSyn.UIElement));
# 515 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                           IsVisible (true, _1) 
                   )
# 78 "Parser.fsy"
                 : AbSyn.ButtonProp));
# 528 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                   IsVisible (false, _1) 
                   )
# 79 "Parser.fsy"
                 : AbSyn.ButtonProp));
# 541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                           Width (fst _3, _1) 
                   )
# 80 "Parser.fsy"
                 : AbSyn.ButtonProp));
# 554 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                            Height (fst _3, _1) 
                   )
# 81 "Parser.fsy"
                 : AbSyn.ButtonProp));
# 567 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.Stmt list in
            let _7 = parseState.GetInput(7) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                                                                                   Function (fst _2, _6, _1) 
                   )
# 84 "Parser.fsy"
                 : AbSyn.FunctionT));
# 584 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Stmt in
            let _2 = parseState.GetInput(2) :?> AbSyn.Stmt list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                    _1 :: _2 
                   )
# 87 "Parser.fsy"
                 : AbSyn.Stmt list));
# 596 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                         _1 :: [] 
                   )
# 88 "Parser.fsy"
                 : AbSyn.Stmt list));
# 607 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.Exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                               Let (fst _2, _4, _1) 
                   )
# 91 "Parser.fsy"
                 : AbSyn.Stmt));
# 621 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                     Constant (Int (fst _1), snd _1) 
                   )
# 94 "Parser.fsy"
                 : AbSyn.Exp));
# 632 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                     Constant (String (fst _1), snd _1) 
                   )
# 95 "Parser.fsy"
                 : AbSyn.Exp));
# 643 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                     Var _1 
                   )
# 96 "Parser.fsy"
                 : AbSyn.Exp));
# 654 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                     Constant (Bool true, _1) 
                   )
# 97 "Parser.fsy"
                 : AbSyn.Exp));
# 665 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                     Constant (Bool false, _1) 
                   )
# 98 "Parser.fsy"
                 : AbSyn.Exp));
|]
# 677 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 30;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.Window =
    engine lexer lexbuf 0 :?> _
