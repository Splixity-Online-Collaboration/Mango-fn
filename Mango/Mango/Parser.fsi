// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF of (Position)
  | COMMA of (Position)
  | LEFT_CURLY_BRACKET of (Position)
  | RIGHT_CURLY_BRACKET of (Position)
  | COLON of (Position)
  | IS_VISIBILE of (Position)
  | TRUE of (Position)
  | FALSE of (Position)
  | BUTTON of (Position)
  | TEXT of (Position)
  | TEXTBOX of (Position)
  | CHECKBOX of (Position)
  | RADIOBUTTON of (Position)
  | CALENDAR of (Position)
  | TOGGLEBUTTON of (Position)
  | TOGGLESWITCH of (Position)
  | WINDOW of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | NUM of (int * Position)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_LEFT_CURLY_BRACKET
    | TOKEN_RIGHT_CURLY_BRACKET
    | TOKEN_COLON
    | TOKEN_IS_VISIBILE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_BUTTON
    | TOKEN_TEXT
    | TOKEN_TEXTBOX
    | TOKEN_CHECKBOX
    | TOKEN_RADIOBUTTON
    | TOKEN_CALENDAR
    | TOKEN_TOGGLEBUTTON
    | TOKEN_TOGGLESWITCH
    | TOKEN_WINDOW
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_Window
    | NONTERM_UIElements
    | NONTERM_ButtonProps
    | NONTERM_UIElement
    | NONTERM_ButtonProp
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (AbSyn.Window) 
