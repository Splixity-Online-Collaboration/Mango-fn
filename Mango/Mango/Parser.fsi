// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF of (Position)
  | COMMA of (Position)
  | LEFT_CURLY_BRACKET of (Position)
  | RIGHT_CURLY_BRACKET of (Position)
  | COLON of (Position)
  | LEFT_PAR of (Position)
  | RIGHT_PAR of (Position)
  | EQUAL of (Position)
  | WORD of (Position)
  | CHARACTER of (Position)
  | NOTRIM of (Position)
  | OVERFLOW of (Position)
  | WRAP of (Position)
  | FORCEWRAP of (Position)
  | HORIZONTAL of (Position)
  | VERTICAL of (Position)
  | CENTER of (Position)
  | LEFT of (Position)
  | RIGHT of (Position)
  | RED of (Position)
  | BLUE of (Position)
  | GREEN of (Position)
  | YELLOW of (Position)
  | PINK of (Position)
  | BLACK of (Position)
  | WHITE of (Position)
  | ITALIC of (Position)
  | UNDERLINE of (Position)
  | STRIKETHROUGH of (Position)
  | FOREGROUND of (Position)
  | BACKGROUND of (Position)
  | FONTFAMILY of (Position)
  | FONTSIZE of (Position)
  | FONTWEIGHT of (Position)
  | FONTSTYLE of (Position)
  | MARGIN of (Position)
  | LAYOUT of (Position)
  | LINEHEIGHT of (Position)
  | TEXTALIGN of (Position)
  | TEXTWRAP of (Position)
  | TEXTTRIM of (Position)
  | IS_VISIBLE of (Position)
  | TRUE of (Position)
  | FALSE of (Position)
  | WIDTH of (Position)
  | HEIGHT of (Position)
  | FUNCTION of (Position)
  | LET of (Position)
  | WINDOW of (Position)
  | CONTAINER of (Position)
  | BUTTON of (Position)
  | TEXT of (Position)
  | TEXTBOX of (Position)
  | CHECKBOX of (Position)
  | RADIOBUTTON of (Position)
  | CALENDAR of (Position)
  | TOGGLEBUTTON of (Position)
  | TOGGLESWITCH of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | HEXCOLOR of (string * Position)
  | NUM of (int * Position)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_LEFT_CURLY_BRACKET
    | TOKEN_RIGHT_CURLY_BRACKET
    | TOKEN_COLON
    | TOKEN_LEFT_PAR
    | TOKEN_RIGHT_PAR
    | TOKEN_EQUAL
    | TOKEN_WORD
    | TOKEN_CHARACTER
    | TOKEN_NOTRIM
    | TOKEN_OVERFLOW
    | TOKEN_WRAP
    | TOKEN_FORCEWRAP
    | TOKEN_HORIZONTAL
    | TOKEN_VERTICAL
    | TOKEN_CENTER
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_RED
    | TOKEN_BLUE
    | TOKEN_GREEN
    | TOKEN_YELLOW
    | TOKEN_PINK
    | TOKEN_BLACK
    | TOKEN_WHITE
    | TOKEN_ITALIC
    | TOKEN_UNDERLINE
    | TOKEN_STRIKETHROUGH
    | TOKEN_FOREGROUND
    | TOKEN_BACKGROUND
    | TOKEN_FONTFAMILY
    | TOKEN_FONTSIZE
    | TOKEN_FONTWEIGHT
    | TOKEN_FONTSTYLE
    | TOKEN_MARGIN
    | TOKEN_LAYOUT
    | TOKEN_LINEHEIGHT
    | TOKEN_TEXTALIGN
    | TOKEN_TEXTWRAP
    | TOKEN_TEXTTRIM
    | TOKEN_IS_VISIBLE
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_WIDTH
    | TOKEN_HEIGHT
    | TOKEN_FUNCTION
    | TOKEN_LET
    | TOKEN_WINDOW
    | TOKEN_CONTAINER
    | TOKEN_BUTTON
    | TOKEN_TEXT
    | TOKEN_TEXTBOX
    | TOKEN_CHECKBOX
    | TOKEN_RADIOBUTTON
    | TOKEN_CALENDAR
    | TOKEN_TOGGLEBUTTON
    | TOKEN_TOGGLESWITCH
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_HEXCOLOR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_Window
    | NONTERM_ContainerProp
    | NONTERM_ContainerProps
    | NONTERM_UIElement
    | NONTERM_UIElements
    | NONTERM_Funcs
    | NONTERM_ButtonProps
    | NONTERM_ButtonProp
    | NONTERM_TextProps
    | NONTERM_TextProp
    | NONTERM_Color
    | NONTERM_FontStyle
    | NONTERM_FontStyles
    | NONTERM_TextAlign
    | NONTERM_TextWrap
    | NONTERM_TextTrim
    | NONTERM_ContainerMargin
    | NONTERM_TextMargin
    | NONTERM_Layout
    | NONTERM_Functions
    | NONTERM_Function
    | NONTERM_Statements
    | NONTERM_Stmt
    | NONTERM_Exp
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Prog : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (AbSyn.Window) 
