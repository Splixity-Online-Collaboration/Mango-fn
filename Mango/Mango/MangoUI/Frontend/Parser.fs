// Implementation file for parser generated by fsyacc
module Frontend.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open MangoUI.Core


open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

let p0 = (0,0)

open FSharp.Text.Parsing
open MangoUI.Core.AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich : (ParseErrorContext<'tok> -> unit) option =
  Some (fun ctxt ->
    ErrorContextDescriptor <-
        match ctxt.CurrentToken with
        | Some tok -> $"Syntax error at token {tok}. {ctxt.Message}"
        | None -> "Syntax error at beginning of file"
  )

let construct_window window elements functions = 
    match window with
    | Window (name, width, height, icon, _, _, pos) -> Window (name, width, height, icon, elements, functions, pos)

let add_ui_elements window elements = 
  match window with
  | Window (name, width, height, icon, _, functions, pos) -> Window (name, width, height, icon, elements, functions, pos)

let parse_hex_code (s: string) : (byte * byte * byte * byte) option =
  let hex = if s.StartsWith("#") then s.Substring(1) else s
  let tryByte i = System.Byte.TryParse(hex.Substring(i,2), System.Globalization.NumberStyles.HexNumber, null)
  match hex.Length with
  | 6 ->
      let (rOk, r), (gOk, g), (bOk, b) = tryByte 0, tryByte 2, tryByte 4
      if rOk && gOk && bOk then Some (r, g, b, 255uy) else None
  | 8 ->
      let (rOk, r), (gOk, g), (bOk, b), (aOk, a) = tryByte 0, tryByte 2, tryByte 4, tryByte 6
      if rOk && gOk && bOk && aOk then Some (r, g, b, a) else None
  | _ -> None

let splitInterleaved props =
    List.foldBack (fun prop (cs, ss) ->
        match prop with
        | Common c   -> (c :: cs, ss)
        | Specific s -> (cs, s :: ss)
    ) props ([], [])

# 51 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF of (Position)
  | COMMA of (Position)
  | LEFT_CURLY_BRACKET of (Position)
  | RIGHT_CURLY_BRACKET of (Position)
  | COLON of (Position)
  | LEFT_PAR of (Position)
  | RIGHT_PAR of (Position)
  | EQUAL of (Position)
  | WORD of (Position)
  | CHARACTER of (Position)
  | NOTRIM of (Position)
  | IDENTIFIER of (Position)
  | OVERFLOW of (Position)
  | WRAP of (Position)
  | FORCEWRAP of (Position)
  | CENTER of (Position)
  | LEFT of (Position)
  | RIGHT of (Position)
  | RED of (Position)
  | BLUE of (Position)
  | GREEN of (Position)
  | YELLOW of (Position)
  | PINK of (Position)
  | BLACK of (Position)
  | WHITE of (Position)
  | ITALIC of (Position)
  | UNDERLINE of (Position)
  | STRIKETHROUGH of (Position)
  | COLOR of (Position)
  | BACKGROUNDCOLOR of (Position)
  | FONTFAMILY of (Position)
  | FONTSIZE of (Position)
  | FONTWEIGHT of (Position)
  | FONTSTYLE of (Position)
  | MARGIN of (Position)
  | LINEHEIGHT of (Position)
  | TEXTALIGN of (Position)
  | TEXTTRIM of (Position)
  | TEXTWRAP of (Position)
  | HIDDEN of (Position)
  | TRUE of (Position)
  | FALSE of (Position)
  | WIDTH of (Position)
  | HEIGHT of (Position)
  | BORDER of (Position)
  | FUNCTION of (Position)
  | LET of (Position)
  | WINDOW of (Position)
  | COLUMN of (Position)
  | ROW of (Position)
  | BUTTON of (Position)
  | TEXT of (Position)
  | TEXTBOX of (Position)
  | CHECKBOX of (Position)
  | RADIOBUTTON of (Position)
  | CALENDAR of (Position)
  | TOGGLEBUTTON of (Position)
  | TOGGLESWITCH of (Position)
  | ID of (string * Position)
  | STRINGLIT of (string * Position)
  | HEXCOLOR of (string * Position)
  | NUM of (int * Position)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_LEFT_CURLY_BRACKET
    | TOKEN_RIGHT_CURLY_BRACKET
    | TOKEN_COLON
    | TOKEN_LEFT_PAR
    | TOKEN_RIGHT_PAR
    | TOKEN_EQUAL
    | TOKEN_WORD
    | TOKEN_CHARACTER
    | TOKEN_NOTRIM
    | TOKEN_IDENTIFIER
    | TOKEN_OVERFLOW
    | TOKEN_WRAP
    | TOKEN_FORCEWRAP
    | TOKEN_CENTER
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_RED
    | TOKEN_BLUE
    | TOKEN_GREEN
    | TOKEN_YELLOW
    | TOKEN_PINK
    | TOKEN_BLACK
    | TOKEN_WHITE
    | TOKEN_ITALIC
    | TOKEN_UNDERLINE
    | TOKEN_STRIKETHROUGH
    | TOKEN_COLOR
    | TOKEN_BACKGROUNDCOLOR
    | TOKEN_FONTFAMILY
    | TOKEN_FONTSIZE
    | TOKEN_FONTWEIGHT
    | TOKEN_FONTSTYLE
    | TOKEN_MARGIN
    | TOKEN_LINEHEIGHT
    | TOKEN_TEXTALIGN
    | TOKEN_TEXTTRIM
    | TOKEN_TEXTWRAP
    | TOKEN_HIDDEN
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_WIDTH
    | TOKEN_HEIGHT
    | TOKEN_BORDER
    | TOKEN_FUNCTION
    | TOKEN_LET
    | TOKEN_WINDOW
    | TOKEN_COLUMN
    | TOKEN_ROW
    | TOKEN_BUTTON
    | TOKEN_TEXT
    | TOKEN_TEXTBOX
    | TOKEN_CHECKBOX
    | TOKEN_RADIOBUTTON
    | TOKEN_CALENDAR
    | TOKEN_TOGGLEBUTTON
    | TOKEN_TOGGLESWITCH
    | TOKEN_ID
    | TOKEN_STRINGLIT
    | TOKEN_HEXCOLOR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startProg
    | NONTERM_Prog
    | NONTERM_Window
    | NONTERM_ContainerProp
    | NONTERM_InterleavedContainerProp
    | NONTERM_ContainerProps
    | NONTERM_UIElement
    | NONTERM_UIElements
    | NONTERM_OptionalUIElements
    | NONTERM_Funcs
    | NONTERM_ButtonProperties
    | NONTERM_Thickness
    | NONTERM_CommonProps
    | NONTERM_CommonProp
    | NONTERM_TextProp
    | NONTERM_InterleavedTextProp
    | NONTERM_TextProps
    | NONTERM_Color
    | NONTERM_FontStyle
    | NONTERM_FontStyles
    | NONTERM_TextAlign
    | NONTERM_TextWrap
    | NONTERM_TextTrim
    | NONTERM_Functions
    | NONTERM_Function
    | NONTERM_Statements
    | NONTERM_Stmt
    | NONTERM_Exp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF _ -> 0 
  | COMMA _ -> 1 
  | LEFT_CURLY_BRACKET _ -> 2 
  | RIGHT_CURLY_BRACKET _ -> 3 
  | COLON _ -> 4 
  | LEFT_PAR _ -> 5 
  | RIGHT_PAR _ -> 6 
  | EQUAL _ -> 7 
  | WORD _ -> 8 
  | CHARACTER _ -> 9 
  | NOTRIM _ -> 10 
  | IDENTIFIER _ -> 11 
  | OVERFLOW _ -> 12 
  | WRAP _ -> 13 
  | FORCEWRAP _ -> 14 
  | CENTER _ -> 15 
  | LEFT _ -> 16 
  | RIGHT _ -> 17 
  | RED _ -> 18 
  | BLUE _ -> 19 
  | GREEN _ -> 20 
  | YELLOW _ -> 21 
  | PINK _ -> 22 
  | BLACK _ -> 23 
  | WHITE _ -> 24 
  | ITALIC _ -> 25 
  | UNDERLINE _ -> 26 
  | STRIKETHROUGH _ -> 27 
  | COLOR _ -> 28 
  | BACKGROUNDCOLOR _ -> 29 
  | FONTFAMILY _ -> 30 
  | FONTSIZE _ -> 31 
  | FONTWEIGHT _ -> 32 
  | FONTSTYLE _ -> 33 
  | MARGIN _ -> 34 
  | LINEHEIGHT _ -> 35 
  | TEXTALIGN _ -> 36 
  | TEXTTRIM _ -> 37 
  | TEXTWRAP _ -> 38 
  | HIDDEN _ -> 39 
  | TRUE _ -> 40 
  | FALSE _ -> 41 
  | WIDTH _ -> 42 
  | HEIGHT _ -> 43 
  | BORDER _ -> 44 
  | FUNCTION _ -> 45 
  | LET _ -> 46 
  | WINDOW _ -> 47 
  | COLUMN _ -> 48 
  | ROW _ -> 49 
  | BUTTON _ -> 50 
  | TEXT _ -> 51 
  | TEXTBOX _ -> 52 
  | CHECKBOX _ -> 53 
  | RADIOBUTTON _ -> 54 
  | CALENDAR _ -> 55 
  | TOGGLEBUTTON _ -> 56 
  | TOGGLESWITCH _ -> 57 
  | ID _ -> 58 
  | STRINGLIT _ -> 59 
  | HEXCOLOR _ -> 60 
  | NUM _ -> 61 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_LEFT_CURLY_BRACKET 
  | 3 -> TOKEN_RIGHT_CURLY_BRACKET 
  | 4 -> TOKEN_COLON 
  | 5 -> TOKEN_LEFT_PAR 
  | 6 -> TOKEN_RIGHT_PAR 
  | 7 -> TOKEN_EQUAL 
  | 8 -> TOKEN_WORD 
  | 9 -> TOKEN_CHARACTER 
  | 10 -> TOKEN_NOTRIM 
  | 11 -> TOKEN_IDENTIFIER 
  | 12 -> TOKEN_OVERFLOW 
  | 13 -> TOKEN_WRAP 
  | 14 -> TOKEN_FORCEWRAP 
  | 15 -> TOKEN_CENTER 
  | 16 -> TOKEN_LEFT 
  | 17 -> TOKEN_RIGHT 
  | 18 -> TOKEN_RED 
  | 19 -> TOKEN_BLUE 
  | 20 -> TOKEN_GREEN 
  | 21 -> TOKEN_YELLOW 
  | 22 -> TOKEN_PINK 
  | 23 -> TOKEN_BLACK 
  | 24 -> TOKEN_WHITE 
  | 25 -> TOKEN_ITALIC 
  | 26 -> TOKEN_UNDERLINE 
  | 27 -> TOKEN_STRIKETHROUGH 
  | 28 -> TOKEN_COLOR 
  | 29 -> TOKEN_BACKGROUNDCOLOR 
  | 30 -> TOKEN_FONTFAMILY 
  | 31 -> TOKEN_FONTSIZE 
  | 32 -> TOKEN_FONTWEIGHT 
  | 33 -> TOKEN_FONTSTYLE 
  | 34 -> TOKEN_MARGIN 
  | 35 -> TOKEN_LINEHEIGHT 
  | 36 -> TOKEN_TEXTALIGN 
  | 37 -> TOKEN_TEXTTRIM 
  | 38 -> TOKEN_TEXTWRAP 
  | 39 -> TOKEN_HIDDEN 
  | 40 -> TOKEN_TRUE 
  | 41 -> TOKEN_FALSE 
  | 42 -> TOKEN_WIDTH 
  | 43 -> TOKEN_HEIGHT 
  | 44 -> TOKEN_BORDER 
  | 45 -> TOKEN_FUNCTION 
  | 46 -> TOKEN_LET 
  | 47 -> TOKEN_WINDOW 
  | 48 -> TOKEN_COLUMN 
  | 49 -> TOKEN_ROW 
  | 50 -> TOKEN_BUTTON 
  | 51 -> TOKEN_TEXT 
  | 52 -> TOKEN_TEXTBOX 
  | 53 -> TOKEN_CHECKBOX 
  | 54 -> TOKEN_RADIOBUTTON 
  | 55 -> TOKEN_CALENDAR 
  | 56 -> TOKEN_TOGGLEBUTTON 
  | 57 -> TOKEN_TOGGLESWITCH 
  | 58 -> TOKEN_ID 
  | 59 -> TOKEN_STRINGLIT 
  | 60 -> TOKEN_HEXCOLOR 
  | 61 -> TOKEN_NUM 
  | 64 -> TOKEN_end_of_input
  | 62 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startProg 
    | 1 -> NONTERM_Prog 
    | 2 -> NONTERM_Window 
    | 3 -> NONTERM_Window 
    | 4 -> NONTERM_Window 
    | 5 -> NONTERM_Window 
    | 6 -> NONTERM_Window 
    | 7 -> NONTERM_ContainerProp 
    | 8 -> NONTERM_ContainerProp 
    | 9 -> NONTERM_ContainerProp 
    | 10 -> NONTERM_ContainerProp 
    | 11 -> NONTERM_InterleavedContainerProp 
    | 12 -> NONTERM_InterleavedContainerProp 
    | 13 -> NONTERM_ContainerProps 
    | 14 -> NONTERM_ContainerProps 
    | 15 -> NONTERM_UIElement 
    | 16 -> NONTERM_UIElement 
    | 17 -> NONTERM_UIElement 
    | 18 -> NONTERM_UIElement 
    | 19 -> NONTERM_UIElement 
    | 20 -> NONTERM_UIElement 
    | 21 -> NONTERM_UIElement 
    | 22 -> NONTERM_UIElement 
    | 23 -> NONTERM_UIElement 
    | 24 -> NONTERM_UIElement 
    | 25 -> NONTERM_UIElement 
    | 26 -> NONTERM_UIElement 
    | 27 -> NONTERM_UIElements 
    | 28 -> NONTERM_UIElements 
    | 29 -> NONTERM_OptionalUIElements 
    | 30 -> NONTERM_OptionalUIElements 
    | 31 -> NONTERM_Funcs 
    | 32 -> NONTERM_Funcs 
    | 33 -> NONTERM_ButtonProperties 
    | 34 -> NONTERM_ButtonProperties 
    | 35 -> NONTERM_Thickness 
    | 36 -> NONTERM_Thickness 
    | 37 -> NONTERM_Thickness 
    | 38 -> NONTERM_CommonProps 
    | 39 -> NONTERM_CommonProps 
    | 40 -> NONTERM_CommonProp 
    | 41 -> NONTERM_CommonProp 
    | 42 -> NONTERM_CommonProp 
    | 43 -> NONTERM_CommonProp 
    | 44 -> NONTERM_CommonProp 
    | 45 -> NONTERM_CommonProp 
    | 46 -> NONTERM_TextProp 
    | 47 -> NONTERM_TextProp 
    | 48 -> NONTERM_TextProp 
    | 49 -> NONTERM_TextProp 
    | 50 -> NONTERM_TextProp 
    | 51 -> NONTERM_TextProp 
    | 52 -> NONTERM_TextProp 
    | 53 -> NONTERM_TextProp 
    | 54 -> NONTERM_TextProp 
    | 55 -> NONTERM_TextProp 
    | 56 -> NONTERM_InterleavedTextProp 
    | 57 -> NONTERM_InterleavedTextProp 
    | 58 -> NONTERM_TextProps 
    | 59 -> NONTERM_TextProps 
    | 60 -> NONTERM_Color 
    | 61 -> NONTERM_Color 
    | 62 -> NONTERM_Color 
    | 63 -> NONTERM_Color 
    | 64 -> NONTERM_Color 
    | 65 -> NONTERM_Color 
    | 66 -> NONTERM_Color 
    | 67 -> NONTERM_Color 
    | 68 -> NONTERM_FontStyle 
    | 69 -> NONTERM_FontStyle 
    | 70 -> NONTERM_FontStyle 
    | 71 -> NONTERM_FontStyles 
    | 72 -> NONTERM_FontStyles 
    | 73 -> NONTERM_TextAlign 
    | 74 -> NONTERM_TextAlign 
    | 75 -> NONTERM_TextAlign 
    | 76 -> NONTERM_TextWrap 
    | 77 -> NONTERM_TextWrap 
    | 78 -> NONTERM_TextWrap 
    | 79 -> NONTERM_TextTrim 
    | 80 -> NONTERM_TextTrim 
    | 81 -> NONTERM_TextTrim 
    | 82 -> NONTERM_Functions 
    | 83 -> NONTERM_Functions 
    | 84 -> NONTERM_Function 
    | 85 -> NONTERM_Statements 
    | 86 -> NONTERM_Statements 
    | 87 -> NONTERM_Stmt 
    | 88 -> NONTERM_Stmt 
    | 89 -> NONTERM_Exp 
    | 90 -> NONTERM_Exp 
    | 91 -> NONTERM_Exp 
    | 92 -> NONTERM_Exp 
    | 93 -> NONTERM_Exp 
    | 94 -> NONTERM_Exp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 64 
let _fsyacc_tagOfErrorTerminal = 62

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF _ -> "EOF" 
  | COMMA _ -> "COMMA" 
  | LEFT_CURLY_BRACKET _ -> "LEFT_CURLY_BRACKET" 
  | RIGHT_CURLY_BRACKET _ -> "RIGHT_CURLY_BRACKET" 
  | COLON _ -> "COLON" 
  | LEFT_PAR _ -> "LEFT_PAR" 
  | RIGHT_PAR _ -> "RIGHT_PAR" 
  | EQUAL _ -> "EQUAL" 
  | WORD _ -> "WORD" 
  | CHARACTER _ -> "CHARACTER" 
  | NOTRIM _ -> "NOTRIM" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | OVERFLOW _ -> "OVERFLOW" 
  | WRAP _ -> "WRAP" 
  | FORCEWRAP _ -> "FORCEWRAP" 
  | CENTER _ -> "CENTER" 
  | LEFT _ -> "LEFT" 
  | RIGHT _ -> "RIGHT" 
  | RED _ -> "RED" 
  | BLUE _ -> "BLUE" 
  | GREEN _ -> "GREEN" 
  | YELLOW _ -> "YELLOW" 
  | PINK _ -> "PINK" 
  | BLACK _ -> "BLACK" 
  | WHITE _ -> "WHITE" 
  | ITALIC _ -> "ITALIC" 
  | UNDERLINE _ -> "UNDERLINE" 
  | STRIKETHROUGH _ -> "STRIKETHROUGH" 
  | COLOR _ -> "COLOR" 
  | BACKGROUNDCOLOR _ -> "BACKGROUNDCOLOR" 
  | FONTFAMILY _ -> "FONTFAMILY" 
  | FONTSIZE _ -> "FONTSIZE" 
  | FONTWEIGHT _ -> "FONTWEIGHT" 
  | FONTSTYLE _ -> "FONTSTYLE" 
  | MARGIN _ -> "MARGIN" 
  | LINEHEIGHT _ -> "LINEHEIGHT" 
  | TEXTALIGN _ -> "TEXTALIGN" 
  | TEXTTRIM _ -> "TEXTTRIM" 
  | TEXTWRAP _ -> "TEXTWRAP" 
  | HIDDEN _ -> "HIDDEN" 
  | TRUE _ -> "TRUE" 
  | FALSE _ -> "FALSE" 
  | WIDTH _ -> "WIDTH" 
  | HEIGHT _ -> "HEIGHT" 
  | BORDER _ -> "BORDER" 
  | FUNCTION _ -> "FUNCTION" 
  | LET _ -> "LET" 
  | WINDOW _ -> "WINDOW" 
  | COLUMN _ -> "COLUMN" 
  | ROW _ -> "ROW" 
  | BUTTON _ -> "BUTTON" 
  | TEXT _ -> "TEXT" 
  | TEXTBOX _ -> "TEXTBOX" 
  | CHECKBOX _ -> "CHECKBOX" 
  | RADIOBUTTON _ -> "RADIOBUTTON" 
  | CALENDAR _ -> "CALENDAR" 
  | TOGGLEBUTTON _ -> "TOGGLEBUTTON" 
  | TOGGLESWITCH _ -> "TOGGLESWITCH" 
  | ID _ -> "ID" 
  | STRINGLIT _ -> "STRINGLIT" 
  | HEXCOLOR _ -> "HEXCOLOR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_CURLY_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_CURLY_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT_PAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT_PAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WORD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHARACTER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOTRIM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OVERFLOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WRAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FORCEWRAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CENTER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEFT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BLUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GREEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | YELLOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PINK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BLACK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WHITE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ITALIC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNDERLINE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRIKETHROUGH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BACKGROUNDCOLOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FONTFAMILY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FONTSIZE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FONTWEIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FONTSTYLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MARGIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LINEHEIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTALIGN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTTRIM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTWRAP _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HIDDEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WIDTH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HEIGHT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BORDER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNCTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WINDOW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COLUMN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TEXTBOX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CHECKBOX _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RADIOBUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CALENDAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOGGLEBUTTON _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TOGGLESWITCH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRINGLIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HEXCOLOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;3us;65535us;27us;25us;50us;25us;55us;25us;3us;65535us;27us;27us;50us;27us;55us;27us;3us;65535us;27us;28us;50us;51us;55us;56us;4us;65535us;9us;59us;51us;59us;56us;59us;59us;59us;4us;65535us;9us;10us;51us;61us;56us;61us;59us;60us;2us;65535us;51us;52us;56us;57us;0us;65535us;2us;65535us;31us;32us;62us;63us;2us;65535us;23us;24us;82us;83us;0us;65535us;7us;65535us;27us;26us;31us;62us;36us;118us;50us;26us;55us;26us;62us;62us;119us;118us;2us;65535us;36us;117us;119us;117us;2us;65535us;36us;119us;119us;119us;2us;65535us;36us;37us;119us;120us;4us;65535us;15us;16us;22us;23us;88us;89us;91us;92us;2us;65535us;103us;132us;132us;132us;2us;65535us;103us;104us;132us;133us;1us;65535us;109us;110us;1us;65535us;112us;113us;1us;65535us;115us;116us;2us;65535us;10us;12us;143us;144us;2us;65535us;10us;143us;143us;143us;2us;65535us;149us;150us;152us;153us;2us;65535us;149us;152us;152us;152us;3us;65535us;149us;158us;152us;158us;156us;157us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;9us;13us;17us;22us;27us;30us;31us;34us;37us;38us;46us;49us;52us;55us;60us;63us;66us;68us;70us;72us;75us;78us;81us;84us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;3us;1us;5us;6us;1us;1us;3us;2us;3us;4us;3us;2us;3us;4us;2us;3us;4us;2us;3us;4us;1us;4us;2us;5us;6us;2us;5us;6us;1us;5us;1us;6us;1us;6us;1us;7us;1us;7us;1us;7us;2us;8us;9us;2us;8us;9us;1us;8us;1us;9us;1us;10us;1us;10us;1us;10us;1us;10us;1us;11us;1us;12us;2us;13us;14us;1us;13us;2us;15us;16us;2us;15us;16us;1us;16us;1us;16us;1us;16us;2us;17us;18us;2us;17us;18us;1us;18us;1us;18us;1us;18us;1us;19us;1us;19us;1us;20us;1us;20us;1us;21us;1us;21us;1us;22us;1us;22us;1us;23us;1us;24us;1us;25us;1us;25us;1us;25us;1us;25us;1us;25us;1us;26us;1us;26us;1us;26us;1us;26us;1us;26us;2us;27us;28us;1us;27us;1us;29us;2us;33us;34us;1us;33us;3us;35us;36us;37us;2us;36us;37us;2us;36us;37us;1us;37us;1us;37us;1us;37us;1us;37us;2us;40us;41us;2us;40us;41us;1us;40us;1us;41us;1us;42us;1us;42us;1us;42us;1us;43us;1us;43us;1us;43us;1us;44us;1us;44us;1us;44us;1us;45us;1us;45us;1us;45us;1us;46us;1us;46us;1us;46us;1us;47us;1us;47us;1us;47us;1us;48us;1us;48us;1us;48us;1us;49us;1us;49us;1us;49us;1us;50us;1us;50us;1us;50us;1us;51us;1us;51us;1us;51us;1us;52us;1us;52us;1us;52us;1us;53us;1us;53us;1us;53us;1us;54us;1us;54us;1us;54us;1us;55us;1us;55us;1us;55us;1us;56us;1us;57us;2us;58us;59us;1us;58us;1us;60us;1us;61us;1us;62us;1us;63us;1us;64us;1us;65us;1us;66us;1us;67us;1us;68us;1us;69us;1us;70us;2us;71us;72us;1us;71us;1us;73us;1us;74us;1us;75us;1us;76us;1us;77us;1us;78us;1us;79us;1us;80us;1us;81us;2us;82us;83us;1us;82us;1us;84us;1us;84us;1us;84us;1us;84us;1us;84us;1us;84us;1us;84us;2us;85us;86us;1us;85us;1us;87us;1us;87us;1us;87us;1us;87us;1us;88us;1us;89us;1us;90us;2us;91us;94us;1us;92us;1us;93us;1us;94us;1us;94us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;8us;10us;14us;18us;21us;24us;26us;29us;32us;34us;36us;38us;40us;42us;44us;47us;50us;52us;54us;56us;58us;60us;62us;64us;66us;69us;71us;74us;77us;79us;81us;83us;86us;89us;91us;93us;95us;97us;99us;101us;103us;105us;107us;109us;111us;113us;115us;117us;119us;121us;123us;125us;127us;129us;131us;133us;135us;138us;140us;142us;145us;147us;151us;154us;157us;159us;161us;163us;165us;168us;171us;173us;175us;177us;179us;181us;183us;185us;187us;189us;191us;193us;195us;197us;199us;201us;203us;205us;207us;209us;211us;213us;215us;217us;219us;221us;223us;225us;227us;229us;231us;233us;235us;237us;239us;241us;243us;245us;247us;249us;251us;253us;255us;257us;259us;261us;263us;266us;268us;270us;272us;274us;276us;278us;280us;282us;284us;286us;288us;290us;293us;295us;297us;299us;301us;303us;305us;307us;309us;311us;313us;316us;318us;320us;322us;324us;326us;328us;330us;332us;335us;337us;339us;341us;343us;345us;347us;349us;351us;354us;356us;358us;360us;|]
let _fsyacc_action_rows = 166
let _fsyacc_actionTableElements = [|1us;32768us;47us;4us;0us;49152us;2us;32768us;0us;3us;2us;9us;0us;16385us;1us;32768us;59us;5us;1us;16386us;61us;6us;1us;32768us;61us;7us;1us;16387us;59us;8us;0us;16388us;10us;32768us;48us;49us;49us;54us;50us;29us;51us;34us;52us;39us;53us;41us;54us;43us;55us;47us;56us;48us;57us;45us;2us;32768us;3us;11us;45us;145us;0us;16389us;1us;32768us;3us;13us;0us;16390us;1us;32768us;4us;15us;8us;32768us;18us;122us;19us;123us;20us;124us;21us;125us;22us;126us;23us;127us;24us;128us;60us;121us;0us;16391us;1us;32768us;4us;18us;2us;32768us;40us;19us;41us;20us;0us;16392us;0us;16393us;1us;32768us;4us;22us;8us;32768us;18us;122us;19us;123us;20us;124us;21us;125us;22us;126us;23us;127us;24us;128us;60us;121us;1us;32768us;61us;64us;0us;16394us;0us;16395us;0us;16396us;8us;16398us;11us;84us;13us;17us;29us;14us;34us;81us;39us;71us;42us;75us;43us;78us;44us;21us;0us;16397us;1us;32768us;59us;30us;1us;16399us;2us;31us;5us;32768us;11us;84us;34us;81us;39us;71us;42us;75us;43us;78us;1us;32768us;3us;33us;0us;16400us;1us;32768us;59us;35us;1us;16401us;2us;36us;15us;32768us;11us;84us;28us;87us;29us;90us;30us;93us;31us;96us;32us;99us;33us;102us;34us;81us;35us;105us;36us;108us;37us;114us;38us;111us;39us;71us;42us;75us;43us;78us;1us;32768us;3us;38us;0us;16402us;1us;32768us;59us;40us;0us;16403us;1us;32768us;59us;42us;0us;16404us;1us;32768us;59us;44us;0us;16405us;1us;32768us;59us;46us;0us;16406us;0us;16407us;0us;16408us;1us;32768us;2us;50us;8us;32768us;11us;84us;13us;17us;29us;14us;34us;81us;39us;71us;42us;75us;43us;78us;44us;21us;10us;16414us;48us;49us;49us;54us;50us;29us;51us;34us;52us;39us;53us;41us;54us;43us;55us;47us;56us;48us;57us;45us;1us;32768us;3us;53us;0us;16409us;1us;32768us;2us;55us;8us;32768us;11us;84us;13us;17us;29us;14us;34us;81us;39us;71us;42us;75us;43us;78us;44us;21us;10us;16414us;48us;49us;49us;54us;50us;29us;51us;34us;52us;39us;53us;41us;54us;43us;55us;47us;56us;48us;57us;45us;1us;32768us;3us;58us;0us;16410us;10us;16412us;48us;49us;49us;54us;50us;29us;51us;34us;52us;39us;53us;41us;54us;43us;55us;47us;56us;48us;57us;45us;0us;16411us;0us;16413us;5us;16418us;11us;84us;34us;81us;39us;71us;42us;75us;43us;78us;0us;16417us;1us;16419us;1us;65us;1us;32768us;61us;66us;1us;16420us;1us;67us;1us;32768us;61us;68us;1us;32768us;1us;69us;1us;32768us;61us;70us;0us;16421us;1us;32768us;4us;72us;2us;32768us;40us;73us;41us;74us;0us;16424us;0us;16425us;1us;32768us;4us;76us;1us;32768us;61us;77us;0us;16426us;1us;32768us;4us;79us;1us;32768us;61us;80us;0us;16427us;1us;32768us;4us;82us;1us;32768us;61us;64us;0us;16428us;1us;32768us;4us;85us;1us;32768us;58us;86us;0us;16429us;1us;32768us;4us;88us;8us;32768us;18us;122us;19us;123us;20us;124us;21us;125us;22us;126us;23us;127us;24us;128us;60us;121us;0us;16430us;1us;32768us;4us;91us;8us;32768us;18us;122us;19us;123us;20us;124us;21us;125us;22us;126us;23us;127us;24us;128us;60us;121us;0us;16431us;1us;32768us;4us;94us;1us;32768us;59us;95us;0us;16432us;1us;32768us;4us;97us;1us;32768us;61us;98us;0us;16433us;1us;32768us;4us;100us;1us;32768us;61us;101us;0us;16434us;1us;32768us;4us;103us;3us;32768us;25us;129us;26us;130us;27us;131us;0us;16435us;1us;32768us;4us;106us;1us;32768us;61us;107us;0us;16436us;1us;32768us;4us;109us;3us;32768us;15us;134us;16us;135us;17us;136us;0us;16437us;1us;32768us;4us;112us;3us;32768us;12us;137us;13us;138us;14us;139us;0us;16438us;1us;32768us;4us;115us;3us;32768us;8us;140us;9us;141us;10us;142us;0us;16439us;0us;16440us;0us;16441us;15us;16443us;11us;84us;28us;87us;29us;90us;30us;93us;31us;96us;32us;99us;33us;102us;34us;81us;35us;105us;36us;108us;37us;114us;38us;111us;39us;71us;42us;75us;43us;78us;0us;16442us;0us;16444us;0us;16445us;0us;16446us;0us;16447us;0us;16448us;0us;16449us;0us;16450us;0us;16451us;0us;16452us;0us;16453us;0us;16454us;3us;16456us;25us;129us;26us;130us;27us;131us;0us;16455us;0us;16457us;0us;16458us;0us;16459us;0us;16460us;0us;16461us;0us;16462us;0us;16463us;0us;16464us;0us;16465us;1us;16467us;45us;145us;0us;16466us;1us;32768us;58us;146us;1us;32768us;5us;147us;1us;32768us;6us;148us;1us;32768us;2us;149us;6us;32768us;40us;162us;41us;163us;46us;154us;58us;161us;59us;160us;61us;159us;1us;32768us;3us;151us;0us;16468us;6us;16470us;40us;162us;41us;163us;46us;154us;58us;161us;59us;160us;61us;159us;0us;16469us;1us;32768us;58us;155us;1us;32768us;7us;156us;5us;32768us;40us;162us;41us;163us;58us;161us;59us;160us;61us;159us;0us;16471us;0us;16472us;0us;16473us;0us;16474us;1us;16475us;5us;164us;0us;16476us;0us;16477us;1us;32768us;6us;165us;0us;16478us;|]
let _fsyacc_actionTableRowOffsets = [|0us;2us;3us;6us;7us;9us;11us;13us;15us;16us;27us;30us;31us;33us;34us;36us;45us;46us;48us;51us;52us;53us;55us;64us;66us;67us;68us;69us;78us;79us;81us;83us;89us;91us;92us;94us;96us;112us;114us;115us;117us;118us;120us;121us;123us;124us;126us;127us;128us;129us;131us;140us;151us;153us;154us;156us;165us;176us;178us;179us;190us;191us;192us;198us;199us;201us;203us;205us;207us;209us;211us;212us;214us;217us;218us;219us;221us;223us;224us;226us;228us;229us;231us;233us;234us;236us;238us;239us;241us;250us;251us;253us;262us;263us;265us;267us;268us;270us;272us;273us;275us;277us;278us;280us;284us;285us;287us;289us;290us;292us;296us;297us;299us;303us;304us;306us;310us;311us;312us;313us;329us;330us;331us;332us;333us;334us;335us;336us;337us;338us;339us;340us;341us;345us;346us;347us;348us;349us;350us;351us;352us;353us;354us;355us;357us;358us;360us;362us;364us;366us;373us;375us;376us;383us;384us;386us;388us;394us;395us;396us;397us;398us;400us;401us;402us;404us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;2us;4us;5us;4us;5us;3us;3us;3us;4us;1us;1us;2us;1us;2us;5us;2us;5us;2us;2us;2us;2us;1us;1us;5us;5us;2us;1us;1us;0us;2us;1us;2us;1us;1us;3us;7us;2us;1us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;3us;1us;1us;2us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;2us;1us;7us;2us;1us;4us;1us;1us;1us;1us;1us;1us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;2us;2us;2us;3us;3us;3us;3us;4us;4us;5us;5us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;6us;7us;7us;8us;8us;9us;9us;10us;10us;11us;11us;11us;12us;12us;13us;13us;13us;13us;13us;13us;14us;14us;14us;14us;14us;14us;14us;14us;14us;14us;15us;15us;16us;16us;17us;17us;17us;17us;17us;17us;17us;17us;18us;18us;18us;19us;19us;20us;20us;20us;21us;21us;21us;22us;22us;22us;23us;23us;24us;25us;25us;26us;26us;27us;27us;27us;27us;27us;27us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;16389us;65535us;16390us;65535us;65535us;16391us;65535us;65535us;16392us;16393us;65535us;65535us;65535us;16394us;16395us;16396us;65535us;16397us;65535us;65535us;65535us;65535us;16400us;65535us;65535us;65535us;65535us;16402us;65535us;16403us;65535us;16404us;65535us;16405us;65535us;16406us;16407us;16408us;65535us;65535us;65535us;65535us;16409us;65535us;65535us;65535us;65535us;16410us;65535us;16411us;16413us;65535us;16417us;65535us;65535us;65535us;65535us;65535us;65535us;16421us;65535us;65535us;16424us;16425us;65535us;65535us;16426us;65535us;65535us;16427us;65535us;65535us;16428us;65535us;65535us;16429us;65535us;65535us;16430us;65535us;65535us;16431us;65535us;65535us;16432us;65535us;65535us;16433us;65535us;65535us;16434us;65535us;65535us;16435us;65535us;65535us;16436us;65535us;65535us;16437us;65535us;65535us;16438us;65535us;65535us;16439us;16440us;16441us;65535us;16442us;16444us;16445us;16446us;16447us;16448us;16449us;16450us;16451us;16452us;16453us;16454us;65535us;16455us;16457us;16458us;16459us;16460us;16461us;16462us;16463us;16464us;16465us;65535us;16466us;65535us;65535us;65535us;65535us;65535us;65535us;16468us;65535us;16469us;65535us;65535us;65535us;16471us;16472us;16473us;16474us;65535us;16476us;16477us;65535us;16478us;|]
let _fsyacc_reductions = lazy [|
# 593 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startProg));
# 602 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            let _2 = parseState.GetInput(2) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                         _1 
                   )
# 84 "Parser.fsy"
                 : AbSyn.Window));
# 614 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                 Window (fst _2, None, None, None, [], [], _1) 
                   )
# 88 "Parser.fsy"
                 : AbSyn.Window));
# 626 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                    Window (fst _2, Some (fst _3), Some (fst _4), None, [], [], _1) 
                   )
# 89 "Parser.fsy"
                 : AbSyn.Window));
# 640 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> int * Position in
            let _5 = parseState.GetInput(5) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                              Window (fst _2, Some (fst _3), Some (fst _4), Some (fst _5), [], [], _1) 
                   )
# 90 "Parser.fsy"
                 : AbSyn.Window));
# 655 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UIElement list in
            let _4 = parseState.GetInput(4) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                                                    add_ui_elements _1 _3 
                   )
# 91 "Parser.fsy"
                 : AbSyn.Window));
# 669 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Window in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.UIElement list in
            let _4 = parseState.GetInput(4) :?> 'gentype_Functions in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                                              construct_window _1 _3 _4 
                   )
# 92 "Parser.fsy"
                 : AbSyn.Window));
# 684 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.ColorT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                         ContainerProp.BackgroundColor (_3, _1) 
                   )
# 96 "Parser.fsy"
                 : AbSyn.ContainerProp));
# 697 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                         ContainerProp.Wrap (true, _1) 
                   )
# 97 "Parser.fsy"
                 : AbSyn.ContainerProp));
# 710 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                         ContainerProp.Wrap (false, _1) 
                   )
# 98 "Parser.fsy"
                 : AbSyn.ContainerProp));
# 723 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.ColorT in
            let _4 = parseState.GetInput(4) :?> 'gentype_Thickness in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                         ContainerProp.Border (_3, _4, _1) 
                   )
# 99 "Parser.fsy"
                 : AbSyn.ContainerProp));
# 737 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.ContainerProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                             Specific _1 
                   )
# 103 "Parser.fsy"
                 : 'gentype_InterleavedContainerProp));
# 748 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_CommonProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                             Common _1 
                   )
# 104 "Parser.fsy"
                 : 'gentype_InterleavedContainerProp));
# 759 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_InterleavedContainerProp in
            let _2 = parseState.GetInput(2) :?> AbSyn.InterleavedProp<ContainerProp> list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                                   _1 :: _2 
                   )
# 108 "Parser.fsy"
                 : AbSyn.InterleavedProp<ContainerProp> list));
# 771 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_InterleavedContainerProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                                   [_1] 
                   )
# 109 "Parser.fsy"
                 : AbSyn.InterleavedProp<ContainerProp> list));
# 782 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                                                                           Button (fst _2, None, _1) 
                   )
# 113 "Parser.fsy"
                 : AbSyn.UIElement));
# 794 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> 'gentype_ButtonProperties in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                                                                           Button (fst _2, Some _4, _1) 
                   )
# 114 "Parser.fsy"
                 : AbSyn.UIElement));
# 809 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                                                                           TextBlock (fst _2, None, None, _1) 
                   )
# 115 "Parser.fsy"
                 : AbSyn.UIElement));
# 821 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.InterleavedProp<TextBlockProp> list in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                          
                             let commonProps, specificProps = splitInterleaved _4
                             TextBlock(fst _2, Some commonProps, Some specificProps, _1)
                         
                   )
# 117 "Parser.fsy"
                 : AbSyn.UIElement));
# 839 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                                                                           TextBox (fst _2, _1) 
                   )
# 121 "Parser.fsy"
                 : AbSyn.UIElement));
# 851 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                                                                           CheckBox (fst _2, _1) 
                   )
# 122 "Parser.fsy"
                 : AbSyn.UIElement));
# 863 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                                                           RadioButton (fst _2, _1) 
                   )
# 123 "Parser.fsy"
                 : AbSyn.UIElement));
# 875 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                                                                           ToggleSwitch (fst _2, _1) 
                   )
# 124 "Parser.fsy"
                 : AbSyn.UIElement));
# 887 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                                                                           Calendar _1 
                   )
# 125 "Parser.fsy"
                 : AbSyn.UIElement));
# 898 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                                                           ToggleButton _1 
                   )
# 126 "Parser.fsy"
                 : AbSyn.UIElement));
# 909 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.InterleavedProp<ContainerProp> list in
            let _4 = parseState.GetInput(4) :?> 'gentype_OptionalUIElements in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                           
                             let commonProps, specificProps = splitInterleaved _3
                             Column (Some commonProps, Some specificProps, _4, _1)
                         
                   )
# 128 "Parser.fsy"
                 : AbSyn.UIElement));
# 927 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.InterleavedProp<ContainerProp> list in
            let _4 = parseState.GetInput(4) :?> 'gentype_OptionalUIElements in
            let _5 = parseState.GetInput(5) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                           
                             let commonProps, specificProps = splitInterleaved _3
                             Row (Some commonProps, Some specificProps, _4, _1)
                         
                   )
# 133 "Parser.fsy"
                 : AbSyn.UIElement));
# 945 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UIElement in
            let _2 = parseState.GetInput(2) :?> AbSyn.UIElement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                _1 :: _2 
                   )
# 140 "Parser.fsy"
                 : AbSyn.UIElement list));
# 957 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UIElement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                [_1] 
                   )
# 141 "Parser.fsy"
                 : AbSyn.UIElement list));
# 968 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.UIElement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                      _1 
                   )
# 145 "Parser.fsy"
                 : 'gentype_OptionalUIElements));
# 979 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                      [] 
                   )
# 146 "Parser.fsy"
                 : 'gentype_OptionalUIElements));
# 989 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.FunctionT in
            let _2 = parseState.GetInput(2) :?> 'gentype_Funcs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                              _1 :: _2 
                   )
# 150 "Parser.fsy"
                 : 'gentype_Funcs));
# 1001 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.FunctionT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                              [_1] 
                   )
# 151 "Parser.fsy"
                 : 'gentype_Funcs));
# 1012 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_CommonProp in
            let _2 = parseState.GetInput(2) :?> 'gentype_ButtonProperties in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                                      _1 :: _2 
                   )
# 154 "Parser.fsy"
                 : 'gentype_ButtonProperties));
# 1024 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_CommonProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                 [_1] 
                   )
# 155 "Parser.fsy"
                 : 'gentype_ButtonProperties));
# 1035 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                              Uniform (fst _1) 
                   )
# 159 "Parser.fsy"
                 : 'gentype_Thickness));
# 1046 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                              Symmetric (fst _1, fst _3) 
                   )
# 160 "Parser.fsy"
                 : 'gentype_Thickness));
# 1059 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> int * Position in
            let _6 = parseState.GetInput(6) :?> Position in
            let _7 = parseState.GetInput(7) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                                              Custom (fst _1, fst _3, fst _5, fst _7) 
                   )
# 161 "Parser.fsy"
                 : 'gentype_Thickness));
# 1076 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_CommonProp in
            let _2 = parseState.GetInput(2) :?> 'gentype_CommonProps in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                            _1 :: _2 
                   )
# 164 "Parser.fsy"
                 : 'gentype_CommonProps));
# 1088 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_CommonProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                 [_1] 
                   )
# 165 "Parser.fsy"
                 : 'gentype_CommonProps));
# 1099 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                      Hidden (true, _1) 
                   )
# 168 "Parser.fsy"
                 : 'gentype_CommonProp));
# 1112 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                              Hidden (false, _1) 
                   )
# 169 "Parser.fsy"
                 : 'gentype_CommonProp));
# 1125 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                  Width (fst _3, _1) 
                   )
# 170 "Parser.fsy"
                 : 'gentype_CommonProp));
# 1138 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                  Height (fst _3, _1) 
                   )
# 171 "Parser.fsy"
                 : 'gentype_CommonProp));
# 1151 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_Thickness in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                  Margin (_3, _1) 
                   )
# 172 "Parser.fsy"
                 : 'gentype_CommonProp));
# 1164 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                               Id (fst _3, _1) 
                   )
# 173 "Parser.fsy"
                 : 'gentype_CommonProp));
# 1177 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.ColorT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                       TextBlockProp.Color (_3, _1) 
                   )
# 177 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1190 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> AbSyn.ColorT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                       TextBlockProp.BackgroundColor (_3, _1) 
                   )
# 178 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1203 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                                       TextBlockProp.FontFamily (fst _3, _1) 
                   )
# 179 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1216 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                       TextBlockProp.FontSize (fst _3, _1) 
                   )
# 180 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1229 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                       TextBlockProp.FontWeight (fst _3, _1) 
                   )
# 181 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1242 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_FontStyles in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                       TextBlockProp.FontStyle (List.rev _3, _1) 
                   )
# 182 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1255 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                       TextBlockProp.LineHeight (fst _3, _1) 
                   )
# 183 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1268 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_TextAlign in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                                       TextBlockProp.TextAlign (_3, _1) 
                   )
# 184 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1281 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_TextWrap in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                                       TextBlockProp.TextWrap (_3, _1) 
                   )
# 185 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1294 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> 'gentype_TextTrim in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                       TextBlockProp.TextTrim (_3, _1) 
                   )
# 186 "Parser.fsy"
                 : AbSyn.TextBlockProp));
# 1307 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.TextBlockProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                         Specific _1 
                   )
# 190 "Parser.fsy"
                 : 'gentype_InterleavedTextProp));
# 1318 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_CommonProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                             Common _1 
                   )
# 191 "Parser.fsy"
                 : 'gentype_InterleavedTextProp));
# 1329 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_InterleavedTextProp in
            let _2 = parseState.GetInput(2) :?> AbSyn.InterleavedProp<TextBlockProp> list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "Parser.fsy"
                                                         _1 :: _2 
                   )
# 195 "Parser.fsy"
                 : AbSyn.InterleavedProp<TextBlockProp> list));
# 1341 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_InterleavedTextProp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                         [_1] 
                   )
# 196 "Parser.fsy"
                 : AbSyn.InterleavedProp<TextBlockProp> list));
# 1352 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                 
                         match parse_hex_code (fst _1) with
                         | Some rgba -> Hex (rgba, snd _1)
                         | None -> failwithf "Invalid hex color: %s" (fst _1)
                       
                   )
# 201 "Parser.fsy"
                 : AbSyn.ColorT));
# 1367 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                  ColorName (Red, _1) 
                   )
# 206 "Parser.fsy"
                 : AbSyn.ColorT));
# 1378 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                  ColorName (Blue, _1) 
                   )
# 207 "Parser.fsy"
                 : AbSyn.ColorT));
# 1389 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                  ColorName (Green, _1) 
                   )
# 208 "Parser.fsy"
                 : AbSyn.ColorT));
# 1400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                  ColorName (Yellow, _1) 
                   )
# 209 "Parser.fsy"
                 : AbSyn.ColorT));
# 1411 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "Parser.fsy"
                                  ColorName (Pink, _1) 
                   )
# 210 "Parser.fsy"
                 : AbSyn.ColorT));
# 1422 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                   ColorName (Black, _1) 
                   )
# 211 "Parser.fsy"
                 : AbSyn.ColorT));
# 1433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                                   ColorName (White, _1) 
                   )
# 212 "Parser.fsy"
                 : AbSyn.ColorT));
# 1444 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "Parser.fsy"
                                                 Italic 
                   )
# 216 "Parser.fsy"
                 : 'gentype_FontStyle));
# 1455 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                         Underline 
                   )
# 217 "Parser.fsy"
                 : 'gentype_FontStyle));
# 1466 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "Parser.fsy"
                                         StrikeThrough 
                   )
# 218 "Parser.fsy"
                 : 'gentype_FontStyle));
# 1477 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_FontStyle in
            let _2 = parseState.GetInput(2) :?> 'gentype_FontStyles in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "Parser.fsy"
                                                         _1 :: _2 
                   )
# 221 "Parser.fsy"
                 : 'gentype_FontStyles));
# 1489 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_FontStyle in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "Parser.fsy"
                                               [_1] 
                   )
# 222 "Parser.fsy"
                 : 'gentype_FontStyles));
# 1500 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "Parser.fsy"
                                          Center 
                   )
# 226 "Parser.fsy"
                 : 'gentype_TextAlign));
# 1511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 227 "Parser.fsy"
                                  Left 
                   )
# 227 "Parser.fsy"
                 : 'gentype_TextAlign));
# 1522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                  Right 
                   )
# 228 "Parser.fsy"
                 : 'gentype_TextAlign));
# 1533 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                             Overflow 
                   )
# 231 "Parser.fsy"
                 : 'gentype_TextWrap));
# 1544 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                      TextWrapT.Wrap 
                   )
# 232 "Parser.fsy"
                 : 'gentype_TextWrap));
# 1555 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "Parser.fsy"
                                      TextWrapT.ForceWrap 
                   )
# 233 "Parser.fsy"
                 : 'gentype_TextWrap));
# 1566 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                            Word 
                   )
# 236 "Parser.fsy"
                 : 'gentype_TextTrim));
# 1577 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 237 "Parser.fsy"
                                     Character 
                   )
# 237 "Parser.fsy"
                 : 'gentype_TextTrim));
# 1588 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                                     NoTrim 
                   )
# 238 "Parser.fsy"
                 : 'gentype_TextTrim));
# 1599 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.FunctionT in
            let _2 = parseState.GetInput(2) :?> 'gentype_Functions in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 241 "Parser.fsy"
                                                      _1 :: _2 
                   )
# 241 "Parser.fsy"
                 : 'gentype_Functions));
# 1611 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.FunctionT in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 242 "Parser.fsy"
                                                      [_1] 
                   )
# 242 "Parser.fsy"
                 : 'gentype_Functions));
# 1622 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> Position in
            let _5 = parseState.GetInput(5) :?> Position in
            let _6 = parseState.GetInput(6) :?> AbSyn.Stmt list in
            let _7 = parseState.GetInput(7) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                                                                                                   AbSyn.Function (fst _2, _6, _1) 
                   )
# 245 "Parser.fsy"
                 : AbSyn.FunctionT));
# 1639 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Stmt in
            let _2 = parseState.GetInput(2) :?> AbSyn.Stmt list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "Parser.fsy"
                                                    _1 :: _2 
                   )
# 248 "Parser.fsy"
                 : AbSyn.Stmt list));
# 1651 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Stmt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                                                    [_1] 
                   )
# 249 "Parser.fsy"
                 : AbSyn.Stmt list));
# 1662 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            let _2 = parseState.GetInput(2) :?> string * Position in
            let _3 = parseState.GetInput(3) :?> Position in
            let _4 = parseState.GetInput(4) :?> AbSyn.Exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "Parser.fsy"
                                               Let (fst _2, _4, _1) 
                   )
# 252 "Parser.fsy"
                 : AbSyn.Stmt));
# 1676 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> AbSyn.Exp in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "Parser.fsy"
                                               ExprStmt (_1, match _1 with Constant(_,pos) | Var(_,pos) | Call(_,pos) -> pos) 
                   )
# 253 "Parser.fsy"
                 : AbSyn.Stmt));
# 1687 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "Parser.fsy"
                                       Constant (Int (fst _1), snd _1) 
                   )
# 257 "Parser.fsy"
                 : AbSyn.Exp));
# 1698 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "Parser.fsy"
                                       Constant (String (fst _1), snd _1) 
                   )
# 258 "Parser.fsy"
                 : AbSyn.Exp));
# 1709 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                       Var _1 
                   )
# 259 "Parser.fsy"
                 : AbSyn.Exp));
# 1720 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 260 "Parser.fsy"
                                       Constant (Bool true, _1) 
                   )
# 260 "Parser.fsy"
                 : AbSyn.Exp));
# 1731 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 261 "Parser.fsy"
                                       Constant (Bool false, _1) 
                   )
# 261 "Parser.fsy"
                 : AbSyn.Exp));
# 1742 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string * Position in
            let _2 = parseState.GetInput(2) :?> Position in
            let _3 = parseState.GetInput(3) :?> Position in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "Parser.fsy"
                                                   Call (fst _1, snd _1) 
                   )
# 262 "Parser.fsy"
                 : AbSyn.Exp));
|]
# 1756 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 65;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Prog lexer lexbuf : AbSyn.Window =
    engine lexer lexbuf 0 :?> _
