%{
let p0 = (0,0)

open MangoUI.Core.AbSyn
open FSharp.Text.Parsing

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich : (ParseErrorContext<'tok> -> unit) option =
  Some (fun ctxt ->
    ErrorContextDescriptor <-
        match ctxt.CurrentToken with
        | Some tok -> $"Syntax error at token {tok}. {ctxt.Message}"
        | None -> "Syntax error at beginning of file"
  )

let construct_window window elements functions = 
    match window with
    | Window (name, width, height, icon, _, _, pos) -> Window (name, width, height, icon, elements, functions, pos)

let add_ui_elements window elements = 
  match window with
  | Window (name, width, height, icon, _, functions, pos) -> Window (name, width, height, icon, elements, functions, pos)

let parse_hex_code (s: string) : (byte * byte * byte * byte) option =
  let hex = if s.StartsWith("#") then s.Substring(1) else s
  let tryByte i = System.Byte.TryParse(hex.Substring(i,2), System.Globalization.NumberStyles.HexNumber, null)
  match hex.Length with
  | 6 ->
      let (rOk, r), (gOk, g), (bOk, b) = tryByte 0, tryByte 2, tryByte 4
      if rOk && gOk && bOk then Some (r, g, b, 255uy) else None
  | 8 ->
      let (rOk, r), (gOk, g), (bOk, b), (aOk, a) = tryByte 0, tryByte 2, tryByte 4, tryByte 6
      if rOk && gOk && bOk && aOk then Some (r, g, b, a) else None
  | _ -> None

%}

// Tokens with values
%token <int * Position> NUM
%token <string * Position> ID STRINGLIT HEXCOLOR

// Keywords
%token <Position> WINDOW COLUMN ROW BUTTON TEXT TEXTBOX CHECKBOX RADIOBUTTON CALENDAR TOGGLEBUTTON TOGGLESWITCH BORDER
%token <Position> HIDDEN TRUE FALSE WIDTH HEIGHT CORNER DENSITY FUNCTION LET UPDATE SET
%token <Position> COLOR BACKGROUNDCOLOR FONTFAMILY FONTSIZE FONTWEIGHT FONTSTYLE MARGIN LINEHEIGHT TEXTALIGN TEXTTRIM TEXTWRAP
%token <Position> ITALIC UNDERLINE STRIKETHROUGH
%token <Position> RED BLUE GREEN YELLOW PINK BLACK WHITE
%token <Position> CENTER LEFT RIGHT FILL HUG
%token <Position> OVERFLOW WRAP FORCEWRAP
%token <Position> WORD CHARACTER NOTRIM IDENTIFIER LABEL ONCLICK LAMBDA_ARROW

// Symbols
%token <Position> EOF COMMA LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET COLON LEFT_PAR RIGHT_PAR EQUAL

// Entry points
%start Prog
%type <MangoUI.Core.AbSyn.Window> Prog
%type <MangoUI.Core.AbSyn.Window> Window

// Types
%type <MangoUI.Core.AbSyn.UIElement list> UIElements
%type <MangoUI.Core.AbSyn.UIElement> UIElement
%type <MangoUI.Core.AbSyn.ColorT> Color
%type <MangoUI.Core.AbSyn.Size> Size
%type <MangoUI.Core.AbSyn.FunctionT> Function
%type <MangoUI.Core.AbSyn.Stmt list> Statements
%type <MangoUI.Core.AbSyn.Stmt> Stmt
%type <MangoUI.Core.AbSyn.Exp> Exp

%%

// Program Root
Prog : Window EOF { $1 }
;

// Window Definition
Window : WINDOW STRINGLIT { Window (fst $2, None, None, None, [], [], $1) }
  | WINDOW STRINGLIT NUM NUM { Window (fst $2, Some (fst $3), Some (fst $4), None, [], [], $1) }
  | WINDOW STRINGLIT NUM NUM STRINGLIT { Window (fst $2, Some (fst $3), Some (fst $4), Some (fst $5), [], [], $1) }
  | Window LEFT_CURLY_BRACKET UIElements RIGHT_CURLY_BRACKET { add_ui_elements $1 $3 }
  | Window LEFT_CURLY_BRACKET UIElements Functions RIGHT_CURLY_BRACKET { construct_window $1 $3 $4 }
;

UIElement :
    BUTTON STRINGLIT                                                                { Button (Some [Label (Some $2)], $1) }
  | BUTTON STRINGLIT LEFT_CURLY_BRACKET Properties RIGHT_CURLY_BRACKET              { Button (Some ([Label (Some $2)] @ $4), $1) }
  | TEXT STRINGLIT                                                                  { TextBlock (Some [Label (Some $2)], $1) }
  | TEXTBOX STRINGLIT                                                               { TextBox (fst $2, $1) }
  | CHECKBOX STRINGLIT                                                              { CheckBox (fst $2, $1) }
  | RADIOBUTTON STRINGLIT                                                           { RadioButton (fst $2, $1) }
  | TOGGLESWITCH STRINGLIT                                                          { ToggleSwitch (fst $2, $1) }
  | CALENDAR                                                                        { Calendar $1 }
  | TOGGLEBUTTON                                                                    { ToggleButton $1 }
  | TEXT STRINGLIT LEFT_CURLY_BRACKET Properties RIGHT_CURLY_BRACKET                { TextBlock (Some ([Label (Some $2)] @ $4), $1) }
  | BORDER LEFT_CURLY_BRACKET Properties UIElement RIGHT_CURLY_BRACKET              { Border (Some $3, $4, $1) }
  | COLUMN LEFT_CURLY_BRACKET Properties OptionalUIElements RIGHT_CURLY_BRACKET     { Column (Some $3, $4, $1) }
  | ROW LEFT_CURLY_BRACKET Properties OptionalUIElements RIGHT_CURLY_BRACKET        { Row (Some $3, $4, $1) }
;

PropertyName : 
    BACKGROUNDCOLOR { BackgroundColor None }
  | WRAP            { Wrap None }
  | CORNER          { Corner None }
  | COLOR           { Color None }
  | DENSITY         { Density None }
  | HIDDEN          { Hidden None }
  | WIDTH           { Width None }
  | HEIGHT          { Height None }
  | MARGIN          { Margin None }
  | IDENTIFIER      { Id None }
  | FONTFAMILY      { FontFamily None }
  | FONTSIZE        { FontSize None }
  | FONTWEIGHT      { FontWeight None }
  | FONTSTYLE       { FontStyle None }
  | LINEHEIGHT      { LineHeight None }
  | TEXTALIGN       { TextAlign None }
  | TEXTWRAP        { TextWrap None }
  | TEXTTRIM        { TextTrim None }
  | LABEL           { Label None }
  | ONCLICK         { Onclick None }
;

Properties : 
    Property Properties { $1 :: $2 }
  | Property            { [$1] }
;

Property : 
  BACKGROUNDCOLOR COLON Color     { BackgroundColor (Some ($3, $1)) }
  | WRAP COLON TRUE               { Wrap (Some (true, $1)) }
  | WRAP COLON FALSE              { Wrap (Some (false, $1)) }
  | CORNER COLON Thickness        { Corner (Some ($3, $1)) }
  | COLOR COLON Color             { Color (Some ($3, $1)) }
  | DENSITY COLON Thickness       { Density (Some ($3, $1)) }
  | HIDDEN COLON TRUE             { Hidden (Some (true, $1)) }
  | HIDDEN COLON FALSE            { Hidden (Some (false, $1)) }
  | WIDTH COLON Size              { Width (Some ($3, $1)) }
  | HEIGHT COLON Size             { Height (Some ($3, $1)) }
  | MARGIN COLON Thickness        { Margin (Some ($3, $1)) }
  | IDENTIFIER COLON ID           { Id (Some (fst $3, $1)) }
  | FONTFAMILY COLON STRINGLIT    { FontFamily (Some (fst $3, $1)) }
  | FONTSIZE COLON NUM            { FontSize (Some (fst $3, $1)) }
  | FONTWEIGHT COLON NUM          { FontWeight (Some (fst $3, $1)) }
  | FONTSTYLE COLON FontStyles    { FontStyle (Some (List.rev $3, $1)) }
  | LINEHEIGHT COLON NUM          { LineHeight (Some (fst $3, $1)) }
  | TEXTALIGN COLON TextAlign     { TextAlign (Some ($3, $1)) }
  | TEXTWRAP COLON TextWrap       { TextWrap (Some ($3, $1)) }
  | TEXTTRIM COLON TextTrim       { TextTrim (Some ($3, $1)) }
  | LABEL COLON STRINGLIT         { Label (Some (fst $3, $1)) }
  | ONCLICK COLON ID              { Onclick (Some (fst $3, $1)) }
  | ONCLICK LAMBDA_ARROW LEFT_CURLY_BRACKET Statements RIGHT_CURLY_BRACKET { OnclickLambda (Some ($4, $1)) }
;

UIElements :
    UIElement UIElements { $1 :: $2 }
  | UIElement            { [$1] }
;

OptionalUIElements :
    UIElements { $1 }
  |            { [] }
;

Thickness :
     NUM                               { Uniform (fst $1) }
  |  NUM COMMA NUM                     { Symmetric (fst $1, fst $3) }
  |  NUM COMMA NUM COMMA NUM COMMA NUM { Custom (fst $1, fst $3, fst $5, fst $7) }
;

// Color
Color :
  HEXCOLOR {
    match parse_hex_code (fst $1) with
    | Some rgba -> Hex (rgba, snd $1)
    | None -> failwithf "Invalid hex color: %s" (fst $1)
  }
  | RED    { ColorName (Red, $1) }
  | BLUE   { ColorName (Blue, $1) }
  | GREEN  { ColorName (Green, $1) }
  | YELLOW { ColorName (Yellow, $1) }
  | PINK   { ColorName (Pink, $1) }
  | BLACK   { ColorName (Black, $1) }
  | WHITE   { ColorName (White, $1) }
;

// FontStyle
FontStyle : ITALIC        { Italic }
  | UNDERLINE     { Underline }
  | STRIKETHROUGH { StrikeThrough }
;

// Size
Size: NUM { Pixels (fst $1) }
  | FILL  { Fill }
  | HUG   { Hug }
;

FontStyles : FontStyle FontStyles { $1 :: $2 }
  | FontStyle           { [$1] }
;

// Alignments & Padding
TextAlign : CENTER { Center }
  | LEFT   { Left }
  | RIGHT  { Right }
;

TextWrap : OVERFLOW   { Overflow }
  | WRAP       { TextWrapT.Wrap }
  | FORCEWRAP  { TextWrapT.ForceWrap }
;

TextTrim : WORD      { Word }
  | CHARACTER { Character }
  | NOTRIM    { NoTrim }
;

Functions : Function Functions { $1 :: $2 }
          | Function           { [$1] }
;

// Functions and Statements
Function : FUNCTION ID LEFT_PAR RIGHT_PAR LEFT_CURLY_BRACKET Statements RIGHT_CURLY_BRACKET { Function (fst $2, $6, $1) }
;

Statements : Stmt Statements { $1 :: $2 }
           | Stmt            { [$1] }
;

Stmt : SET LEFT_PAR PropertyName COMMA ID COMMA Exp RIGHT_PAR { Set ($3, fst $5, $7, $1) }
     | UPDATE LEFT_PAR ID COMMA LEFT_CURLY_BRACKET Properties RIGHT_CURLY_BRACKET RIGHT_PAR { Update (fst $3, $6, $1) }
     | Exp              { ExprStmt ($1, match $1 with Constant(_,pos) | Var(_,pos) | Call(_,pos) -> pos) }
;

// Expressions
Exp : NUM       { Constant (Int (fst $1), snd $1) }
    | STRINGLIT { Constant (String (fst $1), snd $1) }
    | ID        { Var $1 }
    | TRUE      { Constant (Bool true, $1) }
    | FALSE     { Constant (Bool false, $1) }
    | ID LEFT_PAR RIGHT_PAR { Call (fst $1, snd $1) }
;
