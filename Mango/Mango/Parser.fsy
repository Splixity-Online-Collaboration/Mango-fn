%{
let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )

let construct_window window elements functions = 
    match window with
    | Window (name, width, height, icon, _, _, pos) -> Window (name, width, height, icon, elements, functions, pos)

let add_ui_elements window elements = 
  match window with
  | Window (name, width, height, icon, _, functions, pos) -> Window (name, width, height, icon, elements, functions, pos)

let default_button_props pos = [IsVisible (true, pos)]
let default_text_props pos = []

let parse_hex_code (s: string) : (byte * byte * byte * byte) option =
  let hex = if s.StartsWith("#") then s.Substring(1) else s
  let tryByte i = System.Byte.TryParse(hex.Substring(i,2), System.Globalization.NumberStyles.HexNumber, null)
  match hex.Length with
  | 6 ->
      let (rOk, r), (gOk, g), (bOk, b) = tryByte 0, tryByte 2, tryByte 4
      if rOk && gOk && bOk then Some (r, g, b, 255uy) else None
  | 8 ->
      let (rOk, r), (gOk, g), (bOk, b), (aOk, a) = tryByte 0, tryByte 2, tryByte 4, tryByte 6
      if rOk && gOk && bOk && aOk then Some (r, g, b, a) else None
  | _ -> None
%}

// Tokens with values
%token <int * Position> NUM
%token <string * Position> ID STRINGLIT HEXCOLOR

// Keywords
%token <Position> WINDOW COLUMN ROW CONTAINER BUTTON TEXT TEXTBOX CHECKBOX RADIOBUTTON CALENDAR TOGGLEBUTTON TOGGLESWITCH
%token <Position> IS_VISIBLE TRUE FALSE WIDTH HEIGHT FUNCTION LET
%token <Position> FOREGROUND BACKGROUND FONTFAMILY FONTSIZE FONTWEIGHT FONTSTYLE MARGIN LAYOUT LINEHEIGHT TEXTALIGN TEXTWRAP TEXTTRIM
%token <Position> ITALIC UNDERLINE STRIKETHROUGH
%token <Position> RED BLUE GREEN YELLOW PINK BLACK WHITE
%token <Position> CENTER LEFT RIGHT
%token <Position> HORIZONTAL VERTICAL
%token <Position> OVERFLOW WRAP FORCEWRAP
%token <Position> WORD CHARACTER NOTRIM

// Symbols
%token <Position> EOF COMMA LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET COLON LEFT_PAR RIGHT_PAR EQUAL

// Entry points
%start Prog
%type <AbSyn.Window> Prog
%type <AbSyn.Window> Window

// Types
%type <AbSyn.UIElement list> UIElements
%type <AbSyn.UIElement> UIElement
%type <AbSyn.ButtonProp list> ButtonProps
%type <AbSyn.ButtonProp> ButtonProp
%type <AbSyn.TextBlockProp list> TextProps
%type <AbSyn.TextBlockProp> TextProp
%type <AbSyn.ColorT> Color
%type <AbSyn.FunctionT> Function
%type <AbSyn.Stmt list> Statements
%type <AbSyn.Stmt> Stmt
%type <AbSyn.Exp> Exp

%%

// Program Root
Prog : Window EOF { $1 }
;

// Window Definition
Window : WINDOW STRINGLIT { Window (fst $2, None, None, None, [], [], $1) }
  | WINDOW STRINGLIT NUM NUM { Window (fst $2, Some (fst $3), Some (fst $4), None, [], [], $1) }
  | WINDOW STRINGLIT NUM NUM STRINGLIT { Window (fst $2, Some (fst $3), Some (fst $4), Some (fst $5), [], [], $1) }
  | Window LEFT_CURLY_BRACKET UIElements RIGHT_CURLY_BRACKET { add_ui_elements $1 $3 }
  | Window LEFT_CURLY_BRACKET UIElements Functions RIGHT_CURLY_BRACKET { construct_window $1 $3 $4 }
;

// Getting rid of container soon
ContainerProp : 
    LAYOUT COLON Layout { Layout ($3, $1) }
  | MARGIN COLON ContainerMargin { ContainerProp.Margin ($3, $1) }

ContainerProps :
    ContainerProp ContainerProps  { $1 :: $2 }
  | ContainerProp             { [$1] }

// TODO: Add Column

RowProp : 
  | MARGIN COLON RowMargin { RowProp.Margin ($3, $1) }

RowProps :
    RowProp RowProps  { $1 :: $2 }
  | RowProp             { [$1] }

UIElement :
    BUTTON STRINGLIT                                                              { Button (fst $2, default_button_props $1, $1) }
  | BUTTON STRINGLIT LEFT_CURLY_BRACKET ButtonProps RIGHT_CURLY_BRACKET           { Button (fst $2, $4, $1) }
  | TEXT STRINGLIT                                                                { TextBlock (fst $2, None, $1) }
  | TEXT STRINGLIT LEFT_CURLY_BRACKET TextProps RIGHT_CURLY_BRACKET               { TextBlock (fst $2, Some $4, $1) }
  | TEXTBOX STRINGLIT                                                             { TextBox (fst $2, $1) }
  | CHECKBOX STRINGLIT                                                            { CheckBox (fst $2, $1) }
  | RADIOBUTTON STRINGLIT                                                         { RadioButton (fst $2, $1) }
  | TOGGLESWITCH STRINGLIT                                                        { ToggleSwitch (fst $2, $1) }
  | CALENDAR                                                                      { Calendar $1 }
  | TOGGLEBUTTON                                                                  { ToggleButton $1 }
  | CONTAINER LEFT_CURLY_BRACKET ContainerProps UIElements RIGHT_CURLY_BRACKET    { Container ($3, $4, $1)}
  | ROW LEFT_CURLY_BRACKET RowProps UIElements RIGHT_CURLY_BRACKET                { Row ($3, $4, $1)}
;

UIElements :
    UIElement UIElements { $1 :: $2 }
  | UIElement            { [$1] }
;

// Functions
Funcs : Function Funcs { $1 :: $2 }
      | Function       { [$1] }
;

// Button Props
ButtonProps : ButtonProp ButtonProps { $1 :: $2 }
  | ButtonProp            { [$1] }
;

ButtonProp : IS_VISIBLE COLON TRUE  { IsVisible (true, $1) }
  | IS_VISIBLE COLON FALSE { IsVisible (false, $1) }
  | WIDTH COLON NUM        { Width (fst $3, $1) }
  | HEIGHT COLON NUM       { Height (fst $3, $1) }
;

// Text Props
TextProps : TextProp TextProps { $1 :: $2 }
  | TextProp           { [$1] }
;

TextProp :
    FOREGROUND COLON Color      { Foreground ($3, $1) }
  | BACKGROUND COLON Color      { Background ($3, $1) }
  | FONTFAMILY COLON STRINGLIT  { FontFamily (fst $3, $1) }
  | FONTSIZE COLON NUM          { FontSize (fst $3, $1) }
  | FONTWEIGHT COLON NUM        { FontWeight (fst $3, $1) }
  | FONTSTYLE COLON FontStyles  { FontStyle (List.rev $3, $1) }
  | MARGIN COLON TextMargin    { TextBlockProp.Margin ($3, $1) }
  | LINEHEIGHT COLON NUM        { LineHeight (fst $3, $1) }
  | TEXTALIGN COLON TextAlign   { TextAlign ($3, $1) }
  | TEXTWRAP COLON TextWrap     { TextWrap ($3, $1) }
  | TEXTTRIM COLON TextTrim     { TextTrim ($3, $1) }
;

// Color
Color :
  HEXCOLOR {
    match parse_hex_code (fst $1) with
    | Some rgba -> Hex (rgba, snd $1)
    | None -> failwithf "Invalid hex color: %s" (fst $1)
  }
  | RED    { ColorName (Red, $1) }
  | BLUE   { ColorName (Blue, $1) }
  | GREEN  { ColorName (Green, $1) }
  | YELLOW { ColorName (Yellow, $1) }
  | PINK   { ColorName (Pink, $1) }
  | BLACK   { ColorName (Black, $1) }
  | WHITE   { ColorName (White, $1) }
;

// FontStyle
FontStyle : ITALIC        { Italic }
  | UNDERLINE     { Underline }
  | STRIKETHROUGH { StrikeThrough }
;

FontStyles : FontStyle FontStyles { $1 :: $2 }
  | FontStyle           { [$1] }
;

// Alignments & Padding
TextAlign : CENTER { Center }
  | LEFT   { Left }
  | RIGHT  { Right }
;

TextWrap : OVERFLOW   { Overflow }
  | WRAP       { Wrap }
  | FORCEWRAP  { ForceWrap }
;

TextTrim : WORD      { Word }
  | CHARACTER { Character }
  | NOTRIM    { NoTrim }
;

ContainerMargin :
     NUM                               { Uniform (fst $1) }
  |  NUM COMMA NUM                     { Symmetric (fst $1, fst $3) }
  |  NUM COMMA NUM COMMA NUM COMMA NUM { Custom (fst $1, fst $3, fst $5, fst $7) }
;

RowMargin : 
     NUM                               { Uniform (fst $1) }
  |  NUM COMMA NUM                     { Symmetric (fst $1, fst $3) }
  |  NUM COMMA NUM COMMA NUM COMMA NUM { Custom (fst $1, fst $3, fst $5, fst $7) }
;

TextMargin :
     NUM                               { Uniform (fst $1) }
  |  NUM COMMA NUM                     { Symmetric (fst $1, fst $3) }
  |  NUM COMMA NUM COMMA NUM COMMA NUM { Custom (fst $1, fst $3, fst $5, fst $7) }
;

Layout : 
    HORIZONTAL  { Horizontal }
  | VERTICAL    { Vertical }
;

Functions : Function Functions { $1 :: $2 }
          | Function           { [$1] }

// Functions and Statements
Function : FUNCTION ID LEFT_PAR RIGHT_PAR LEFT_CURLY_BRACKET Statements RIGHT_CURLY_BRACKET { AbSyn.Function (fst $2, $6, $1) }
;

Statements : Stmt Statements { $1 :: $2 }
           | Stmt            { [$1] }
;

Stmt : LET ID EQUAL Exp { Let (fst $2, $4, $1) }
     | Exp              { ExprStmt ($1, match $1 with Constant(_,pos) | Var(_,pos) | Call(_,pos) -> pos) }
;

// Expressions
Exp : NUM       { Constant (Int (fst $1), snd $1) }
    | STRINGLIT { Constant (String (fst $1), snd $1) }
    | ID        { Var $1 }
    | TRUE      { Constant (Bool true, $1) }
    | FALSE     { Constant (Bool false, $1) }
    | ID LEFT_PAR RIGHT_PAR { Call (fst $1, snd $1) }
;
