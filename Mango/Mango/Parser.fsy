%{
let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich : (ParseErrorContext<'tok> -> unit) option =
  Some (fun ctxt ->
    ErrorContextDescriptor <-
        match ctxt.CurrentToken with
        | Some tok -> $"Syntax error at token {tok}. {ctxt.Message}"
        | None -> "Syntax error at beginning of file"
  )

let construct_window window elements functions = 
    match window with
    | Window (name, width, height, icon, _, _, pos) -> Window (name, width, height, icon, elements, functions, pos)

let add_ui_elements window elements = 
  match window with
  | Window (name, width, height, icon, _, functions, pos) -> Window (name, width, height, icon, elements, functions, pos)

let parse_hex_code (s: string) : (byte * byte * byte * byte) option =
  let hex = if s.StartsWith("#") then s.Substring(1) else s
  let tryByte i = System.Byte.TryParse(hex.Substring(i,2), System.Globalization.NumberStyles.HexNumber, null)
  match hex.Length with
  | 6 ->
      let (rOk, r), (gOk, g), (bOk, b) = tryByte 0, tryByte 2, tryByte 4
      if rOk && gOk && bOk then Some (r, g, b, 255uy) else None
  | 8 ->
      let (rOk, r), (gOk, g), (bOk, b), (aOk, a) = tryByte 0, tryByte 2, tryByte 4, tryByte 6
      if rOk && gOk && bOk && aOk then Some (r, g, b, a) else None
  | _ -> None

let splitInterleaved props =
    List.foldBack (fun prop (cs, ss) ->
        match prop with
        | Common c   -> (c :: cs, ss)
        | Specific s -> (cs, s :: ss)
    ) props ([], [])
%}

// Tokens with values
%token <int * Position> NUM
%token <string * Position> ID STRINGLIT HEXCOLOR

// Keywords
%token <Position> WINDOW COLUMN ROW BUTTON TEXT TEXTBOX CHECKBOX RADIOBUTTON CALENDAR TOGGLEBUTTON TOGGLESWITCH
%token <Position> HIDDEN TRUE FALSE WIDTH HEIGHT BORDER FUNCTION LET
%token <Position> COLOR BACKGROUNDCOLOR FONTFAMILY FONTSIZE FONTWEIGHT FONTSTYLE MARGIN LINEHEIGHT TEXTALIGN TEXTTRIM TEXTWRAP
%token <Position> ITALIC UNDERLINE STRIKETHROUGH
%token <Position> RED BLUE GREEN YELLOW PINK BLACK WHITE
%token <Position> CENTER LEFT RIGHT
%token <Position> OVERFLOW WRAP FORCEWRAP
%token <Position> WORD CHARACTER NOTRIM IDENTIFIER

// Symbols
%token <Position> EOF COMMA LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET COLON LEFT_PAR RIGHT_PAR EQUAL

// Entry points
%start Prog
%type <AbSyn.Window> Prog
%type <AbSyn.Window> Window

// Types
%type <AbSyn.UIElement list> UIElements
%type <AbSyn.UIElement> UIElement
%type <AbSyn.InterleavedProp<TextBlockProp> list> TextProps
%type <AbSyn.TextBlockProp> TextProp
%type <AbSyn.InterleavedProp<ContainerProp> list> ContainerProps
%type <AbSyn.ContainerProp> ContainerProp
%type <AbSyn.ColorT> Color
%type <AbSyn.FunctionT> Function
%type <AbSyn.Stmt list> Statements
%type <AbSyn.Stmt> Stmt
%type <AbSyn.Exp> Exp

%%

// Program Root
Prog : Window EOF { $1 }
;

// Window Definition
Window : WINDOW STRINGLIT { Window (fst $2, None, None, None, [], [], $1) }
  | WINDOW STRINGLIT NUM NUM { Window (fst $2, Some (fst $3), Some (fst $4), None, [], [], $1) }
  | WINDOW STRINGLIT NUM NUM STRINGLIT { Window (fst $2, Some (fst $3), Some (fst $4), Some (fst $5), [], [], $1) }
  | Window LEFT_CURLY_BRACKET UIElements RIGHT_CURLY_BRACKET { add_ui_elements $1 $3 }
  | Window LEFT_CURLY_BRACKET UIElements Functions RIGHT_CURLY_BRACKET { construct_window $1 $3 $4 }
;

ContainerProp : 
  | BACKGROUNDCOLOR COLON Color   { ContainerProp.BackgroundColor ($3, $1) }
  | WRAP COLON TRUE               { ContainerProp.Wrap (true, $1) }
  | WRAP COLON FALSE              { ContainerProp.Wrap (false, $1) }
  | BORDER COLON Color Thickness  { ContainerProp.Border ($3, $4, $1) }
;

InterleavedContainerProp :
    ContainerProp     { Specific $1 }
  | CommonProp        { Common $1 }
;

ContainerProps :
    InterleavedContainerProp ContainerProps { $1 :: $2 }
  | InterleavedContainerProp                { [$1] }
;

UIElement :
    BUTTON STRINGLIT                                                                { Button (fst $2, None, $1) }
  | BUTTON STRINGLIT LEFT_CURLY_BRACKET ButtonProperties RIGHT_CURLY_BRACKET        { Button (fst $2, Some $4, $1) }
  | TEXT STRINGLIT                                                                  { TextBlock (fst $2, None, None, $1) }
  | TEXT STRINGLIT LEFT_CURLY_BRACKET TextProps RIGHT_CURLY_BRACKET
    {
        let commonProps, specificProps = splitInterleaved $4
        TextBlock(fst $2, Some commonProps, Some specificProps, $1)
    }
  | TEXTBOX STRINGLIT                                                               { TextBox (fst $2, $1) }
  | CHECKBOX STRINGLIT                                                              { CheckBox (fst $2, $1) }
  | RADIOBUTTON STRINGLIT                                                           { RadioButton (fst $2, $1) }
  | TOGGLESWITCH STRINGLIT                                                          { ToggleSwitch (fst $2, $1) }
  | CALENDAR                                                                        { Calendar $1 }
  | TOGGLEBUTTON                                                                    { ToggleButton $1 }
  | COLUMN LEFT_CURLY_BRACKET ContainerProps OptionalUIElements RIGHT_CURLY_BRACKET 
    { 
        let commonProps, specificProps = splitInterleaved $3
        Column (Some commonProps, Some specificProps, $4, $1)
    }
  | ROW LEFT_CURLY_BRACKET ContainerProps OptionalUIElements RIGHT_CURLY_BRACKET 
    { 
        let commonProps, specificProps = splitInterleaved $3
        Row (Some commonProps, Some specificProps, $4, $1)
    }
;

UIElements :
    UIElement UIElements { $1 :: $2 }
  | UIElement            { [$1] }
;

OptionalUIElements :
    UIElements { $1 }
  |            { [] }
;

// Functions
Funcs : Function Funcs { $1 :: $2 }
      | Function       { [$1] }
;

ButtonProperties : CommonProp ButtonProperties { $1 :: $2 }
  | CommonProp            { [$1] }
;

Thickness :
     NUM                               { Uniform (fst $1) }
  |  NUM COMMA NUM                     { Symmetric (fst $1, fst $3) }
  |  NUM COMMA NUM COMMA NUM COMMA NUM { Custom (fst $1, fst $3, fst $5, fst $7) }
;

CommonProps : CommonProp CommonProps { $1 :: $2 }
  | CommonProp            { [$1] }
;

CommonProp : HIDDEN COLON TRUE { Hidden (true, $1) }
  | HIDDEN COLON FALSE { Hidden (false, $1) }
  | WIDTH COLON NUM        { Width (fst $3, $1) }
  | HEIGHT COLON NUM       { Height (fst $3, $1) }
  | MARGIN COLON Thickness { Margin ($3, $1) }
  | IDENTIFIER COLON STRINGLIT { Id (fst $3, $1) }
;

TextProp :
    COLOR COLON Color           { TextBlockProp.Color ($3, $1) }
  | BACKGROUNDCOLOR COLON Color { TextBlockProp.BackgroundColor ($3, $1) }
  | FONTFAMILY COLON STRINGLIT  { TextBlockProp.FontFamily (fst $3, $1) }
  | FONTSIZE COLON NUM          { TextBlockProp.FontSize (fst $3, $1) }
  | FONTWEIGHT COLON NUM        { TextBlockProp.FontWeight (fst $3, $1) }
  | FONTSTYLE COLON FontStyles  { TextBlockProp.FontStyle (List.rev $3, $1) }
  | LINEHEIGHT COLON NUM        { TextBlockProp.LineHeight (fst $3, $1) }
  | TEXTALIGN COLON TextAlign   { TextBlockProp.TextAlign ($3, $1) }
  | TEXTWRAP COLON TextWrap     { TextBlockProp.TextWrap ($3, $1) }
  | TEXTTRIM COLON TextTrim     { TextBlockProp.TextTrim ($3, $1) }
;

InterleavedTextProp :
    TextProp      { Specific $1 }
  | CommonProp        { Common $1 }
;

TextProps :
    InterleavedTextProp TextProps { $1 :: $2 }
  | InterleavedTextProp           { [$1] }
;

// Color
Color :
  HEXCOLOR {
    match parse_hex_code (fst $1) with
    | Some rgba -> Hex (rgba, snd $1)
    | None -> failwithf "Invalid hex color: %s" (fst $1)
  }
  | RED    { ColorName (Red, $1) }
  | BLUE   { ColorName (Blue, $1) }
  | GREEN  { ColorName (Green, $1) }
  | YELLOW { ColorName (Yellow, $1) }
  | PINK   { ColorName (Pink, $1) }
  | BLACK   { ColorName (Black, $1) }
  | WHITE   { ColorName (White, $1) }
;

// FontStyle
FontStyle : ITALIC        { Italic }
  | UNDERLINE     { Underline }
  | STRIKETHROUGH { StrikeThrough }
;

FontStyles : FontStyle FontStyles { $1 :: $2 }
  | FontStyle           { [$1] }
;

// Alignments & Padding
TextAlign : CENTER { Center }
  | LEFT   { Left }
  | RIGHT  { Right }
;

TextWrap : OVERFLOW   { Overflow }
  | WRAP       { TextWrapT.Wrap }
  | FORCEWRAP  { TextWrapT.ForceWrap }
;

TextTrim : WORD      { Word }
  | CHARACTER { Character }
  | NOTRIM    { NoTrim }
;

Functions : Function Functions { $1 :: $2 }
          | Function           { [$1] }

// Functions and Statements
Function : FUNCTION ID LEFT_PAR RIGHT_PAR LEFT_CURLY_BRACKET Statements RIGHT_CURLY_BRACKET { AbSyn.Function (fst $2, $6, $1) }
;

Statements : Stmt Statements { $1 :: $2 }
           | Stmt            { [$1] }
;

Stmt : LET ID EQUAL Exp { Let (fst $2, $4, $1) }
     | Exp              { ExprStmt ($1, match $1 with Constant(_,pos) | Var(_,pos) | Call(_,pos) -> pos) }
;

// Expressions
Exp : NUM       { Constant (Int (fst $1), snd $1) }
    | STRINGLIT { Constant (String (fst $1), snd $1) }
    | ID        { Var $1 }
    | TRUE      { Constant (Bool true, $1) }
    | FALSE     { Constant (Bool false, $1) }
    | ID LEFT_PAR RIGHT_PAR { Call (fst $1, snd $1) }
;
