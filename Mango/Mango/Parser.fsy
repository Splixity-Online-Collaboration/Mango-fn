%{

let p0 = (0,0)

open FSharp.Text.Parsing
open AbSyn

(* parse-error function *)
let mutable ErrorContextDescriptor : string = ""

let parse_error_rich =
  Some (fun (ctxt: ParseErrorContext<_>) ->
    ErrorContextDescriptor <-
      match ctxt.CurrentToken with
      | None -> "At beginning of input\n"
      | Some token -> sprintf "at token %A\n" token
  )

let add_ui_elements window elements = 
  match window with
  | Window (name, _, pos) -> Window (name, elements, pos)
  | WindowWithSize (name, width, height, _, pos) -> WindowWithSize (name, width, height, elements, pos)
  | WindowWithIcon (name, width, height, iconPath, _, pos) -> WindowWithIcon (name, width, height, iconPath, elements, pos)
  | Invalid -> Invalid

%}

//information-carrying tokens
%token <int * Position> NUM
%token <string * Position> ID STRINGLIT
//keywords
%token <Position> WINDOW BUTTON
%token <Position> EOF COMMA LEFT_CURLY_BRACKET RIGHT_CURLY_BRACKET

%start Prog
%type <AbSyn.Window> Prog
%type <AbSyn.Window> Window
%type <AbSyn.UIElement list> UIElements

%%

Prog :    Window EOF   { $1 }
;

Window :  WINDOW STRINGLIT { Window (fst $2, [], $1) }
    | WINDOW STRINGLIT NUM NUM { WindowWithSize (fst $2, fst $3, fst $4, [], $1) }
    | WINDOW STRINGLIT NUM NUM STRINGLIT { WindowWithIcon (fst $2, fst $3, fst $4, fst $5, [], $1) }
    | Window LEFT_CURLY_BRACKET UIElements RIGHT_CURLY_BRACKET { add_ui_elements $1 $3 }
;

UIElements : UIElement UIElements       { $1 :: $2 }
           | UIElement                  { $1 :: [] }
;

UIElement : BUTTON STRINGLIT { Button (fst $2, $1) }

%%
